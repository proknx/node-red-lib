[
    {
        "id": "d8e2fe77.61881",
        "type": "group",
        "z": "eb3e4041.662fc8",
        "name": "CUSTOM MEDIA CONTROL FOR SONY BRAVIA TV",
        "style": {
            "label": true
        },
        "nodes": [
            "f7d75f03.5fdfb",
            "dd7cc7e4.b56598",
            "62769e92.57af8",
            "2513cd35.0e83e2",
            "3184d6ee.91c90a",
            "e1fa41ea.f8a6a",
            "e7a41bc.fb032e8",
            "f4427437.8fc4c8",
            "345b119d.92574e",
            "1c2c57b9.4e77c8",
            "cc5695c8.773908",
            "9f84b2a0.5cad1",
            "8556e1ad.84878",
            "864aeb39.ab1f98",
            "635d82c1.1fb66c",
            "7d378d30.c3f524",
            "211d587f.cd93e8",
            "301ddee5.ad4fa2",
            "5252021a.15393c",
            "cf956d5b.e56bb",
            "4ebf2da7.a15934",
            "4b70f795.6a7ed8",
            "1c0f4c34.651a94",
            "e98e9d7d.f88c2",
            "a9e80cb9.2966",
            "d098ed22.2c21",
            "75c0fe19.ea851",
            "415cc3c8.c7a7bc",
            "8cddfd70.f6d7f",
            "a086990.085b368",
            "bf0ed473.f6f8e8",
            "409e5beb.f0db14",
            "d5e31455.11e508",
            "9835f21a.f9b86",
            "d3d00d3c.39cb6",
            "b01299f8.3e7388",
            "fd7f793d.7e38f8",
            "c442683.477d598",
            "41cd1762.aa9368",
            "845e88c.91b9878",
            "2857a2c4.969c2e",
            "63eafa88.8d5694",
            "f2129b73.6dbb48",
            "25d9f169.1dd6be",
            "9171bc8d.e4093",
            "8993607a.ed5c7",
            "8665df3d.87b95",
            "3e4adc64.3a7f14",
            "a7a77e3f.689b7",
            "96aa241e.f8eb08",
            "917d4d41.4ea23",
            "46f6208.6ba1be",
            "fdf3d36.8ad2b3",
            "bc19976f.978168",
            "669831ab.56ec4",
            "46f32539.9eea1c",
            "a82ee110.e39c6",
            "5f5abf63.aebd5",
            "f2f9ec0b.2899b",
            "e7d45c95.06ddc",
            "bde6ed51.d8c7d",
            "a731f3fa.5fac2",
            "df23ef8c.0ad4d",
            "f4729d18.cd08",
            "338f3432.89172c",
            "b652f4e3.a82978",
            "725135ef.a71ebc",
            "d16c082b.0dea68",
            "91dd6a66.2e2ea8",
            "1eb18ebc.e2e781",
            "95ab0235.f997b",
            "e1aeccd5.865d1",
            "ce173f74.57801",
            "15f5de75.827e92",
            "1c4d3b90.4321b4",
            "953a0339.708a3",
            "ac9a308.72f4ad",
            "719f97dd.675098",
            "b3224791.357ba8",
            "924a80a2.5c18b",
            "758850aa.4b85c",
            "57c47883.4cba68",
            "c63e6d3f.90cfc",
            "e51a34e9.dbb8f8",
            "ad50bf1d.3c9e",
            "5d8b982c.24e408",
            "38b23f91.9a0f7",
            "b8d70fbc.245e1",
            "b7d3e66f.b558c8",
            "575200b1.568b9",
            "bcbaccb8.b9f99",
            "c006e058.1cac2"
        ],
        "x": 1697,
        "y": 139,
        "w": 812,
        "h": 1822
    },
    {
        "id": "f7d75f03.5fdfb",
        "type": "http in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "GET /tvfavorites",
        "url": "/tvfavorites",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1834,
        "y": 1920,
        "wires": [
            [
                "dd7cc7e4.b56598"
            ]
        ]
    },
    {
        "id": "dd7cc7e4.b56598",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "get(\"tvFavorites\");",
        "func": "var tvFavorites = global.get(\"tvFavorites\");\nmsg.payload = {\"tvfavorites\": \"false\"};\nif(tvFavorites !== undefined){\n    msg.payload = JSON.stringify(tvFavorites);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1969,
        "y": 1920,
        "wires": [
            [
                "a82ee110.e39c6"
            ]
        ],
        "l": false
    },
    {
        "id": "62769e92.57af8",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "next",
        "topic": "hermes/intent/ProKNX:next",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1784,
        "y": 1280,
        "wires": [
            [
                "e7a41bc.fb032e8"
            ]
        ]
    },
    {
        "id": "2513cd35.0e83e2",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "previous",
        "topic": "hermes/intent/ProKNX:previous",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1794,
        "y": 1320,
        "wires": [
            [
                "e7a41bc.fb032e8"
            ]
        ]
    },
    {
        "id": "3184d6ee.91c90a",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "hotword off",
        "topic": "hermes/hotword/toggleOn",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1784,
        "y": 309,
        "wires": [
            [
                "1c2c57b9.4e77c8"
            ]
        ]
    },
    {
        "id": "e1fa41ea.f8a6a",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "hotword on",
        "topic": "hermes/hotword/default/detected",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1784,
        "y": 220,
        "wires": [
            [
                "f4427437.8fc4c8"
            ]
        ]
    },
    {
        "id": "e7a41bc.fb032e8",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Filter",
        "func": "// Sample code : control of TV set\n\nfunction findObjectByKey(array, key, value) {\n\titems = [];\n\tvar cpt = 0;\n\tfor (var i = 0; i < array.length; i++) {\n\t\tif (array[i][key] === value) {\n\t\t\titems[cpt] = array[i];\n\t\t\tcpt++;\n\t\t}\n\t}\n\tif (items[0] !== undefined) {\n\t\treturn items;\n\t} else {\n\t\treturn null;\n\t}\n}\n\nvar lang = global.get(\"msgLang\");\nvar defaultSpeaker = global.get(\"defaultSpeaker\");\nvar siteIdTv = global.get(\"siteIdTv\");\nif(defaultSpeaker === undefined){\n    defaultSpeaker = \"speaker\";\n}\nmsg.cmd={};\nmsg.payload = JSON.parse(msg.payload);\nvar doAllRooms = false;\nvar intent = msg.payload.intent.intentName;\nif (intent === undefined) \n    return null;\n\nvar rawRoom = findObjectByKey(msg.payload.slots, 'slotName', 'room');\nvar rawFavorite = findObjectByKey(msg.payload.slots, 'entity', 'FavoriteType');\nvar rawSpeaker = findObjectByKey(msg.payload.slots, 'entity', 'SpeakerType');\n\n//node.warn(msg.payload);\n//node.warn(\"rawRoom: \"+ JSON.stringify(rawRoom) );\nvar theRoom = msg.payload.siteId;\n\nif (rawRoom !== null) {\n\tmsg.cmd.room = [];\n\tfor (var i = 0; i < rawRoom.length; i++) {\n\t\tmsg.cmd.room[i] = rawRoom[i].value.value.toLowerCase();\n\t\t//node.warn(\"msg.cmd.room[i]: \"+msg.cmd.room[i] + \"   msg.payload.siteId: \"+msg.payload.siteId);\n\t\tif (msg.cmd.room[i] === \"here\" || msg.cmd.room[i] === \"hier\" || msg.cmd.room[i] === \"ici\") {\n\t\t\ttheRoom = msg.payload.siteId;\n\t\t} else {\n    \t\tif (msg.cmd.room[i] === \"all\" || msg.cmd.room[i] === \"everywhere\" || msg.cmd.room[i] === \"ueberall\" || msg.cmd.room[i] === \"partout\") {\n    \t\t    doAllRooms = true;\n    \t\t} else {\n    \t\t    theRoom = msg.cmd.room[i].replace(/ /g, \"_\");\n    \t\t}\n\t\t}\n\t}\n} \nmsg.payload.siteId = theRoom.replace(/_/g, \"\");\n//node.warn(\" Will use msg.payload.siteId: \"+msg.payload.siteId);\n\nif(msg.payload.siteId !== siteIdTv.replace(/ /g, \"\")){\n    return;\n}\n\nif (rawFavorite !== null) {\n    //node.warn(\"rawFavorite: \"+JSON.stringify(rawFavorite));\n    msg.payload.favorite = rawFavorite[0].value.value.trim().toLowerCase();\n    node.warn(\"msg.payload.favorite: \"+msg.payload.favorite);\n}\n\n\nif (rawSpeaker !== null) {\n    //node.warn(\"rawSpeaker: \"+JSON.stringify(rawSpeaker));\n    msg.payload.speaker = rawSpeaker[0].value.value.trim().toLowerCase();\n} else {\n    msg.payload.speaker = defaultSpeaker.trim().toLowerCase();\n}\n//node.warn(\"msg.payload.speaker: \"+msg.payload.speaker);\n    \nif (msg.payload.intent.confidenceScore < 0.6 || msg.payload.asrTokens[0].length <= 1){\n    return null;\n}\n\n//node.warn(\"msg.payload.speaker = \" + msg.payload.speaker);\n\nif(msg.payload.speaker !== undefined){\n    if(msg.payload.speaker === \"tv\") {\n        //node.warn(\"intent \" + intent);\n        switch (intent) {\n            case \"ProKNX:next\": return [msg, null, null, null, null];\n            case \"ProKNX:previous\": return [null, msg, null, null, null];\n            case \"ProKNX:increaseVolume\": return [null, null, msg, null, null];\n            case \"ProKNX:decreaseVolume\": return [null, null, null, msg, null];\n            case \"ProKNX:setVolume\": flow.set(\"rawLoudness\", findObjectByKey(msg.payload.slots, 'slotName', 'loudness')); flow.set(\"rawMin\", findObjectByKey(msg.payload.slots, 'slotName', 'min'));\n                                    flow.set(\"rawMax\", findObjectByKey(msg.payload.slots, 'slotName', 'max')); return [null, null, null, null, msg];\n        }\n    }\n}\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1933,
        "y": 1360,
        "wires": [
            [
                "bf0ed473.f6f8e8",
                "1c0f4c34.651a94"
            ],
            [
                "409e5beb.f0db14",
                "e98e9d7d.f88c2"
            ],
            [
                "917d4d41.4ea23"
            ],
            [
                "46f6208.6ba1be"
            ],
            [
                "bc19976f.978168"
            ]
        ],
        "outputLabels": [
            "pause",
            "play",
            "next",
            "previous",
            "incvol"
        ]
    },
    {
        "id": "f4427437.8fc4c8",
        "type": "json",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1899,
        "y": 220,
        "wires": [
            [
                "345b119d.92574e"
            ]
        ],
        "l": false
    },
    {
        "id": "345b119d.92574e",
        "type": "delay",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1948,
        "y": 220,
        "wires": [
            [
                "57c47883.4cba68"
            ]
        ],
        "l": false
    },
    {
        "id": "1c2c57b9.4e77c8",
        "type": "json",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1899,
        "y": 309,
        "wires": [
            [
                "c63e6d3f.90cfc"
            ]
        ],
        "l": false
    },
    {
        "id": "cc5695c8.773908",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Info - readme",
        "info": "The following nodes let you implement custom media control for Sony Bravia TV,\n\nIMPORTANT: To avoid your custom code is removed on flow update it is recommended to copy paste the nodes below to a new Tab\n\nTo apply this function it to your tv, you need to change the ip address of the tv\n\nTo change, go to configurations nodes and find SONY BRAVIA TV node and double click it\nChange the host to your tv's ip address and type in the PSK and save\n",
        "x": 1794,
        "y": 180,
        "wires": []
    },
    {
        "id": "9f84b2a0.5cad1",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "French favorites (samples)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "[\"TF1\",\"France 2\",\"France 3\",\"Canal plus\",\"France 5\",\"Arte\",\"Play Store\",\"YouTube\",\"Youtube Music\",\"Recorded Title List\",\"Media Player\",\"TV\",\"Prime Video\",\"Apple TV\",\"Play Games\",\"Play Movies\",\"Netflix\",\"Bonus Offer\",\"Sony Select\",\"Timers\",\"Internet Browser\",\"Disney+\",\"Molotov\",\"ProKNX\"]",
        "payloadType": "json",
        "x": 1894,
        "y": 1780,
        "wires": [
            [
                "864aeb39.ab1f98"
            ]
        ]
    },
    {
        "id": "8556e1ad.84878",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "German favorites (samples)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "[\"Bayerischer Rundfunk\",\"Das Erste\",\"Rundfunk Berlin-Brandenburg\",\"tset day eff\",\"Sky Deutschland\",\"Arte\",\"Play Store\",\"YouTube\",\"Youtube Music\",\"Recorded Title List\",\"Media Player\",\"TV\",\"Prime Video\",\"Apple TV\",\"Play Games\",\"Play Movies\",\"Netflix\",\"Bonus Offer\",\"Sony Select\",\"Timers\",\"Internet Browser\",\"Disney+\",\"Molotov\"]",
        "payloadType": "json",
        "x": 1894,
        "y": 1820,
        "wires": [
            [
                "635d82c1.1fb66c"
            ]
        ]
    },
    {
        "id": "864aeb39.ab1f98",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "lang?",
        "func": "var lang = global.get(\"msgLang\");\nif(lang.toLowerCase().includes(\"fr\")){\n    return msg;\n}\nelse {\n    //do nothing\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2134,
        "y": 1780,
        "wires": [
            [
                "7d378d30.c3f524"
            ]
        ]
    },
    {
        "id": "635d82c1.1fb66c",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "lang?",
        "func": "var lang = global.get(\"msgLang\");\nif(lang.toLowerCase().includes(\"de\")){\n    return msg;\n}\nelse {\n    //do nothing\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2134,
        "y": 1820,
        "wires": [
            [
                "7d378d30.c3f524"
            ]
        ]
    },
    {
        "id": "7d378d30.c3f524",
        "type": "change",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Save",
        "rules": [
            {
                "t": "set",
                "p": "tvFavorites",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "useTvFavorites",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2294,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "211d587f.cd93e8",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "English favorites (samples)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "[\"Bee bee cee World News\",\"France twenty four\",\"Cee enn bee cee\",\"Sky News\",\"Play Store\",\"YouTube\",\"Youtube Music\",\"Recorded Title List\",\"Media Player\",\"TV\",\"Prime Video\",\"Apple TV\",\"Play Games\",\"Play Movies\",\"Netflix\",\"Bonus Offer\",\"Sony Select\",\"Timers\",\"Internet Browser\",\"Disney Plus\",\"Molotov\"]",
        "payloadType": "json",
        "x": 1894,
        "y": 1860,
        "wires": [
            [
                "301ddee5.ad4fa2"
            ]
        ]
    },
    {
        "id": "301ddee5.ad4fa2",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "lang?",
        "func": "var lang = global.get(\"msgLang\");\nif(lang.toLowerCase().includes(\"en\")){\n    return msg;\n}\nelse {\n    //do nothing\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 2134,
        "y": 1860,
        "wires": [
            [
                "7d378d30.c3f524"
            ]
        ]
    },
    {
        "id": "5252021a.15393c",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "tv",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "tv",
        "payloadType": "str",
        "x": 1809,
        "y": 1680,
        "wires": [
            [
                "cf956d5b.e56bb"
            ]
        ],
        "l": false
    },
    {
        "id": "cf956d5b.e56bb",
        "type": "change",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Set defaultSpeaker (value: \"tv\" or \"speaker\")",
        "rules": [
            {
                "t": "set",
                "p": "defaultSpeaker",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2044,
        "y": 1710,
        "wires": [
            []
        ]
    },
    {
        "id": "4ebf2da7.a15934",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Dynamic default speaker (readme)",
        "info": "If the target speaker (tv or speaker) is not given by the user, then it is useful to set the default speaker.\nYoy can set the default speaker dynamically.\n\nUse case:\n1. The TV is on, set the default speaker is set to \"tv\"\n2. User say \"Play Sky news\" \n3. SONOS will *not* play \"Sky news\"\n4. The \"TV handler\" will receive the Play message and handle it \n\nUse case:\n1. The TV is off and the default speaker not set (i.e. speaker)\n2. User say \"Play Sky news\" \n3. SONOS will play \"Sky news\"\n4. The \"TV handler\" will receive the Play message but will not take action\n\nUse case:\n1. The TV is off and the default speaker not set (i.e. speaker)\n2. User say \"Play Sky news on the TV\" \n3. SONOS will *not* play \"Sky news\"\n4. The \"TV handler\" will receive the Play message and handle it \n\n",
        "x": 2014,
        "y": 1670,
        "wires": []
    },
    {
        "id": "4b70f795.6a7ed8",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "useTvFavorites",
        "info": "Disable injection / training of TvFavorites by setting the useTvFavorites to false.",
        "x": 2324,
        "y": 1780,
        "wires": []
    },
    {
        "id": "1c0f4c34.651a94",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "HANDLE NEXT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2158,
        "y": 1220,
        "wires": [],
        "l": false
    },
    {
        "id": "e98e9d7d.f88c2",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "HANDLE PREV",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2178,
        "y": 1280,
        "wires": [],
        "l": false
    },
    {
        "id": "a9e80cb9.2966",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "speaker",
        "props": [
            {
                "p": "payload",
                "v": "speaker",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "speaker",
        "payloadType": "str",
        "x": 1809,
        "y": 1720,
        "wires": [
            [
                "cf956d5b.e56bb"
            ]
        ],
        "l": false
    },
    {
        "id": "d098ed22.2c21",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "incVol",
        "topic": "hermes/intent/ProKNX:increaseVolume",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1784,
        "y": 1360,
        "wires": [
            [
                "e7a41bc.fb032e8"
            ]
        ]
    },
    {
        "id": "75c0fe19.ea851",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "decVol",
        "topic": "hermes/intent/ProKNX:decreaseVolume",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1784,
        "y": 1400,
        "wires": [
            [
                "e7a41bc.fb032e8"
            ]
        ]
    },
    {
        "id": "415cc3c8.c7a7bc",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "setVol",
        "topic": "hermes/intent/ProKNX:setVolume",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1784,
        "y": 1440,
        "wires": [
            [
                "e7a41bc.fb032e8"
            ]
        ]
    },
    {
        "id": "8cddfd70.f6d7f",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "TV or Speaker?",
        "info": "The target media is available in msg.payload.speaker\nThe value of msg.payload.speaker is either \"tv\" or \"speaker\".\n\nUse the following code snippet to filter out tv commands:\nif(msg.payload.speaker === \"tv\") {\n    // tv commands only\n}\n",
        "x": 1941,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a086990.085b368",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "README",
        "info": "Cancel pending Shazam: 20 seconds after a SONOS play command has been executed, an automatic Shazam/What's playing is issued. \nIf you wish to cancel such a pending message, send this message",
        "x": 2304,
        "y": 1860,
        "wires": []
    },
    {
        "id": "bf0ed473.f6f8e8",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Next",
        "name": "Next",
        "x": 2073,
        "y": 1220,
        "wires": []
    },
    {
        "id": "409e5beb.f0db14",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Prev",
        "name": "Previous",
        "x": 2084,
        "y": 1280.6000061035156,
        "wires": []
    },
    {
        "id": "d5e31455.11e508",
        "type": "link out",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "CANCEL PENDING SHAZAM OUT",
        "links": [
            "794b6571.398214",
            "74020a3e.b8d344"
        ],
        "x": 2354,
        "y": 1920,
        "wires": []
    },
    {
        "id": "9835f21a.f9b86",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Cancel pending Shazam message",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 2294,
        "y": 1920,
        "wires": [
            [
                "d5e31455.11e508"
            ]
        ],
        "l": false
    },
    {
        "id": "d3d00d3c.39cb6",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "play",
        "topic": "hermes/intent/ProKNX:play",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1773,
        "y": 480,
        "wires": [
            [
                "b01299f8.3e7388"
            ]
        ]
    },
    {
        "id": "b01299f8.3e7388",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Play",
        "func": "\nfunction findObjectByKey(array, key, value) {\n\titems = [];\n\tvar cpt = 0;\n\tfor (var i = 0; i < array.length; i++) {\n\t\tif (array[i][key] === value) {\n\t\t\titems[cpt] = array[i];\n\t\t\tcpt++;\n\t\t}\n\t}\n\tif (items[0] !== undefined) {\n\t\treturn items;\n\t} else {\n\t\treturn null;\n\t}\n}\n\nvar lang = global.get(\"msgLang\");\nvar defaultSpeaker = global.get(\"defaultSpeaker\");\nvar tvFavorites = global.get(\"tvFavorites\");\nvar siteIdTv = global.get(\"siteIdTv\");\nif(defaultSpeaker === undefined){\n    defaultSpeaker = \"speaker\";\n}\nmsg.cmd={};\nmsg.payload = JSON.parse(msg.payload);\nmsg.cmd.siteId = msg.payload.siteId.replace(/_\\d+$/, \"\").trim();\nvar doAllRooms = false;\nvar intent = msg.payload.intent.intentName;\nif (intent === undefined) \n    return null;\n\nvar rawRoom = findObjectByKey(msg.payload.slots, 'slotName', 'room');\nvar rawFavorite = findObjectByKey(msg.payload.slots, 'entity', 'FavoriteType');\nvar rawSpeaker = findObjectByKey(msg.payload.slots, 'entity', 'SpeakerType');\n\n//node.warn(msg.payload);\n//node.warn(\"rawRoom: \"+ JSON.stringify(rawRoom) );\nvar theRoom = msg.payload.siteId;\n\nif (rawRoom !== null) {\n\tmsg.cmd.room = [];\n\tfor (var i = 0; i < rawRoom.length; i++) {\n\t\tmsg.cmd.room[i] = rawRoom[i].value.value.toLowerCase();\n\t\t//node.warn(\"msg.cmd.room[i]: \"+msg.cmd.room[i] + \"   msg.payload.siteId: \"+msg.payload.siteId);\n\t\tif (msg.cmd.room[i] === \"here\" || msg.cmd.room[i] === \"hier\" || msg.cmd.room[i] === \"ici\") {\n\t\t\ttheRoom = msg.payload.siteId;\n\t\t} else {\n    \t\tif (msg.cmd.room[i] === \"all\" || msg.cmd.room[i] === \"everywhere\" || msg.cmd.room[i] === \"ueberall\" || msg.cmd.room[i] === \"partout\") {\n    \t\t    doAllRooms = true;\n    \t\t} else {\n    \t\t    theRoom = msg.cmd.room[i].replace(/ /g, \"_\");\n    \t\t}\n\t\t}\n\t}\n}\n\nmsg.payload.siteId = theRoom;\n\nif(msg.payload.siteId.replace(/_/g, \"\") !== siteIdTv.replace(/ /g, \"\")){\n    \n    if (lang === \"de\") {\n        \n        text = \"Im \" + msg.payload.siteId.replace(/_/g, \" \") + \" ist kein Fernsehen. Sie können in der \"+ playOnSonosSite+ \" spielen\";\n        msg.payload = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"de-DE\"\n            };\n    } else if (lang === \"fr\") {\n        \n        text = \"Il n'y a pas de télé dans la \" + msg.payload.siteId.replace(/_/g, \" \") + \" mais vous pouvez allumer dans \"+ siteIdTv;\n        msg.payload = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"fr-FR\"\n            };\n    } else {\n        text = \"There's no TV in the \" + msg.payload.siteId.replace(/_/g, \" \") + \", but you can turn on in the \"+ siteIdTv;\n        msg.payload = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"en-EN\"\n            };\n    }\n    \n    return [msg, null, null];\n}\n//node.warn(\" Will use msg.payload.siteId: \"+msg.payload.siteId);\n//global.set(\"siteIdTv\", msg.payload.siteId);\n\nif (rawFavorite !== null) {\n    //node.warn(\"rawFavorite: \"+JSON.stringify(rawFavorite));\n    msg.payload.favorite = rawFavorite[0].value.value.trim().toLowerCase();\n\n    global.set(\"msg.payload.favorite\", msg.payload.favorite);\n    \n    var found = tvFavorites.find(\n            function(str) { return str.toLowerCase() == msg.payload.favorite.toLowerCase(); }\n        );\n        \n    \n    if (found !== undefined) {\n        return [null, null, msg];\n        \n    }\n}\n\nvar msgFavorite = msg;\nvar sonosPlaylists = global.get(\"sonosPlaylists\");\nvar sonosFavorites = global.get(\"sonosFavorites\");  \n\nif(msg.payload.favorite !== undefined){\n\n    var searchItem = msgFavorite.payload.favorite[0].value;\n    //node.warn(\"searchItem : \"+searchItem);\n    \n    var found = sonosPlaylists.find(\n        function(str) { return str.toLowerCase() == searchItem.toLowerCase(); }\n        );\n    \n    found = sonosFavorites.find(\n            function(str) { return str.toLowerCase() == searchItem.toLowerCase(); }\n        );\n    \n    if(found !== undefined){\n        return;\n    }\n}\n\n\nif (rawSpeaker !== null) {\n    //node.warn(\"rawSpeaker: \"+JSON.stringify(rawSpeaker));\n    msg.payload.speaker = rawSpeaker[0].value.value.trim().toLowerCase();\n} else {\n    msg.payload.speaker = defaultSpeaker.trim().toLowerCase();\n}\n\n//node.warn(\"msg.payload.speaker: \"+msg.payload.speaker);\n    \nif (msg.payload.intent.confidenceScore < 0.6 || msg.payload.asrTokens[0].length <= 1){\n    return null;\n}\n\nif(msg.payload.speaker === \"tv\"){\n    \n    return [null, msg, null];\n    \n}\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1903,
        "y": 480,
        "wires": [
            [
                "758850aa.4b85c"
            ],
            [
                "b652f4e3.a82978",
                "9171bc8d.e4093",
                "575200b1.568b9"
            ],
            [
                "b652f4e3.a82978",
                "719f97dd.675098",
                "575200b1.568b9"
            ]
        ]
    },
    {
        "id": "fd7f793d.7e38f8",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "pause",
        "topic": "hermes/intent/ProKNX:pause",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1773,
        "y": 1080,
        "wires": [
            [
                "845e88c.91b9878"
            ]
        ]
    },
    {
        "id": "c442683.477d598",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "HANDLE OFF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2189,
        "y": 1060,
        "wires": [],
        "l": false
    },
    {
        "id": "41cd1762.aa9368",
        "type": "mqtt in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "hermes/asr/textCaptured",
        "topic": "hermes/asr/textCaptured",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 1884,
        "y": 960,
        "wires": [
            [
                "2857a2c4.969c2e"
            ]
        ]
    },
    {
        "id": "845e88c.91b9878",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Pause",
        "func": "function findObjectByKey(array, key, value) {\n\titems = [];\n\tvar cpt = 0;\n\tfor (var i = 0; i < array.length; i++) {\n\t\tif (array[i][key] === value) {\n\t\t\titems[cpt] = array[i];\n\t\t\tcpt++;\n\t\t}\n\t}\n\tif (items[0] !== undefined) {\n\t\treturn items;\n\t} else {\n\t\treturn null;\n\t}\n}\n\nvar lang = global.get(\"msgLang\");\nvar defaultSpeaker = global.get(\"defaultSpeaker\");\nvar siteIdTv = global.get(\"siteIdTv\");\nif(defaultSpeaker === undefined){\n    defaultSpeaker = \"speaker\";\n}\nmsg.cmd={};\nmsg.payload = JSON.parse(msg.payload);\nvar doAllRooms = false;\nvar intent = msg.payload.intent.intentName;\nif (intent === undefined) \n    return null;\n\nvar rawRoom = findObjectByKey(msg.payload.slots, 'slotName', 'room');\nvar rawFavorite = findObjectByKey(msg.payload.slots, 'entity', 'FavoriteType');\nvar rawSpeaker = findObjectByKey(msg.payload.slots, 'entity', 'SpeakerType');\n\n//node.warn(msg.payload);\n//node.warn(\"rawRoom: \"+ JSON.stringify(rawRoom) );\nvar theRoom = msg.payload.siteId;\n\nif (rawRoom !== null) {\n\tmsg.cmd.room = [];\n\tfor (var i = 0; i < rawRoom.length; i++) {\n\t\tmsg.cmd.room[i] = rawRoom[i].value.value.toLowerCase();\n\t\t//node.warn(\"msg.cmd.room[i]: \"+msg.cmd.room[i] + \"   msg.payload.siteId: \"+msg.payload.siteId);\n\t\tif (msg.cmd.room[i] === \"here\" || msg.cmd.room[i] === \"hier\" || msg.cmd.room[i] === \"ici\") {\n\t\t\ttheRoom = msg.payload.siteId;\n\t\t} else {\n    \t\tif (msg.cmd.room[i] === \"all\" || msg.cmd.room[i] === \"everywhere\" || msg.cmd.room[i] === \"ueberall\" || msg.cmd.room[i] === \"partout\") {\n    \t\t    doAllRooms = true;\n    \t\t} else {\n    \t\t    theRoom = msg.cmd.room[i].replace(/ /g, \"_\");\n    \t\t}\n\t\t}\n\t}\n} \nmsg.payload.siteId = theRoom.replace(/_/g, \"\");\n//node.warn(\" Will use msg.payload.siteId: \"+msg.payload.siteId);\n\nif(msg.payload.siteId !== siteIdTv.replace(/ /g, \"\")){\n    return;\n}\n\nif (rawFavorite !== null) {\n    //node.warn(\"rawFavorite: \"+JSON.stringify(rawFavorite));\n    msg.payload.favorite = rawFavorite[0].value.value.trim().toLowerCase();\n    node.warn(\"msg.payload.favorite: \"+msg.payload.favorite);\n}\n\n\nif (rawSpeaker !== null) {\n    //node.warn(\"rawSpeaker: \"+JSON.stringify(rawSpeaker));\n    msg.payload.speaker = rawSpeaker[0].value.value.trim().toLowerCase();\n} else {\n    msg.payload.speaker = defaultSpeaker.trim().toLowerCase();\n}\nnode.warn(\"msg.payload.speaker: \"+msg.payload.speaker);\n    \nif (msg.payload.intent.confidenceScore < 0.6 || msg.payload.asrTokens[0].length <= 1){\n    return null;\n}\n\nnode.warn(\"msg.payload.speaker = \" + msg.payload.speaker);\n\nvar messageTv = flow.get(\"messageTv\");\n\nif(msg.payload.speaker === \"tv\" ){\n    \n    if(messageTv === \"off\"){\n        return [null, msg];\n    }else{\n        return [msg, null];\n    }\n\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1913,
        "y": 1080,
        "wires": [
            [
                "fdf3d36.8ad2b3"
            ],
            [
                "bcbaccb8.b9f99",
                "c006e058.1cac2"
            ]
        ]
    },
    {
        "id": "2857a2c4.969c2e",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Filter",
        "func": "msg.payload = JSON.parse(msg.payload);\nmsg.cmd = {};\nmsg.cmd.lang = global.get(\"msgLang\");\n\nif(msg.cmd.lang === \"de\"){\n    \n    if(msg.payload.text.includes(\"pause\")){\n            \n            flow.set(\"messageTv\", \"off\");\n    }else{\n        flow.set(\"messageTv\", \"on\");\n    }\n        \n    \n} else if(msg.cmd.lang === \"fr\"){\n    \n    if(msg.payload.text.includes(\"pause\")){\n            \n            flow.set(\"messageTv\", \"off\");\n            \n    }else{\n        flow.set(\"messageTv\", \"on\");\n    }\n    \n}else{\n    \n    if(msg.payload.text.includes(\"pause\")){\n            \n        flow.set(\"messageTv\", \"off\");\n            \n    }else{\n        flow.set(\"messageTv\", \"on\");\n    }\n    \n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2075,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "63eafa88.8d5694",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.2:setAudioVolume",
        "payload": "{\"target\":\"speaker\", \"volume\":\"+2\"}",
        "name": "Volume up",
        "x": 2264,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "f2129b73.6dbb48",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.2:setAudioVolume",
        "payload": "{\"target\":\"speaker\", \"volume\":\"-2\"}",
        "name": "Volume down",
        "x": 2254,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "25d9f169.1dd6be",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:setPowerStatus",
        "payload": "{\"status\":true}",
        "name": "Power on",
        "x": 2294,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "9171bc8d.e4093",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:getPowerStatus",
        "payload": "",
        "name": "TV status",
        "x": 2089,
        "y": 440,
        "wires": [
            [
                "8993607a.ed5c7"
            ]
        ],
        "l": false
    },
    {
        "id": "8993607a.ed5c7",
        "type": "switch",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Is TV On?",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "standby",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2149,
        "y": 440,
        "wires": [
            [
                "25d9f169.1dd6be"
            ],
            [
                "8665df3d.87b95",
                "15f5de75.827e92"
            ]
        ],
        "l": false
    },
    {
        "id": "8665df3d.87b95",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Confirm",
        "name": "Play",
        "x": 2304,
        "y": 440,
        "wires": []
    },
    {
        "id": "3e4adc64.3a7f14",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.0:setAudioMute",
        "payload": "{\"status\":true}",
        "name": "Mute",
        "x": 2264,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "a7a77e3f.689b7",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.0:setAudioMute",
        "payload": "{\"status\":false}",
        "name": "Unmute",
        "x": 2274,
        "y": 308,
        "wires": [
            []
        ]
    },
    {
        "id": "96aa241e.f8eb08",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.2:setAudioVolume",
        "payload": "",
        "name": "Set volume",
        "x": 2413,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "917d4d41.4ea23",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.0:setAudioMute",
        "payload": "{\"status\":false}",
        "name": "Unmute",
        "x": 2084,
        "y": 1340.6000061035156,
        "wires": [
            [
                "63eafa88.8d5694"
            ]
        ]
    },
    {
        "id": "46f6208.6ba1be",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.0:setAudioMute",
        "payload": "{\"status\":false}",
        "name": "Unmute",
        "x": 2083,
        "y": 1400,
        "wires": [
            [
                "f2129b73.6dbb48"
            ]
        ]
    },
    {
        "id": "fdf3d36.8ad2b3",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:setPowerStatus",
        "payload": "{\"status\":false}",
        "name": "Power off",
        "x": 2074,
        "y": 1060,
        "wires": [
            [
                "c442683.477d598"
            ]
        ]
    },
    {
        "id": "bc19976f.978168",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.0:setAudioMute",
        "payload": "{\"status\":false}",
        "name": "Unmute",
        "x": 1943,
        "y": 1460,
        "wires": [
            [
                "46f32539.9eea1c"
            ]
        ]
    },
    {
        "id": "669831ab.56ec4",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Set volume",
        "func": "const minLoudness = msg.payload[0].minVolume;\nconst maxLoudness = msg.payload[0].maxVolume;\nvar rawLoudness = flow.get(\"rawLoudness\");\nvar rawMin = flow.get(\"rawMin\");\nvar rawMax = flow.get(\"rawMax\");\nvar loudness = 1;\nvar nbrLoudness = '1';\n\n\nif(rawLoudness!==null){\n    loudness = rawLoudness[0].value.value;\n    nbrLoudness = Number(loudness);\n    if(loudness === undefined || rawLoudness[0].value.kind !== 'Number' || isNaN(nbrLoudness) === true){\n        node.warn(\"Skipping invalid volume\");\n        return;\n    }\n}\nif(rawMax!==null){\n    loudness = maxLoudness;\n}\nif(rawMin!==null){\n    loudness = minLoudness;\n}\nif(nbrLoudness>Number(maxLoudness)){\n    loudness = maxLoudness;\n}\n\nif(nbrLoudness<Number(minLoudness)){\n    loudness = minLoudness;    \n}\n\nloudness = String(loudness);\n\nmsg.payload = {\"target\":\"speaker\",\"volume\":loudness};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2253,
        "y": 1460,
        "wires": [
            [
                "96aa241e.f8eb08"
            ]
        ]
    },
    {
        "id": "46f32539.9eea1c",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "audio:1.0:getVolumeInformation",
        "payload": "",
        "name": "Volume info",
        "x": 2093,
        "y": 1460,
        "wires": [
            [
                "669831ab.56ec4"
            ]
        ]
    },
    {
        "id": "a82ee110.e39c6",
        "type": "http response",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2029,
        "y": 1920,
        "wires": [],
        "l": false
    },
    {
        "id": "5f5abf63.aebd5",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "ChannelTvFavorites",
        "func": "function findObjectByKey(array, key, value) {\n\titems = [];\n\tvar cpt = 0;\n\tfor (var i = 0; i < array.length; i++) {\n\t\tif (array[i][key] === value) {\n\t\t\titems[cpt] = array[i];\n\t\t\tcpt++;\n\t\t}\n\t}\n\tif (items[0] !== undefined) {\n\t\treturn items;\n\t} else {\n\t\treturn null;\n\t}\n}\n\nvar lang = global.get(\"msgLang\");\nvar defaultSpeaker = global.get(\"defaultSpeaker\");\nif(defaultSpeaker === undefined){\n    defaultSpeaker = \"speaker\";\n}\nmsg.cmd={};\nmsg.payload = JSON.parse(msg.payload);\nvar doAllRooms = false;\nvar intent = msg.payload.intent.intentName;\nif (intent === undefined) \n    return null;\n\nvar rawRoom = findObjectByKey(msg.payload.slots, 'slotName', 'room');\nvar rawFavorite = findObjectByKey(msg.payload.slots, 'entity', 'FavoriteType');\nvar rawSpeaker = findObjectByKey(msg.payload.slots, 'entity', 'SpeakerType');\n\n//node.warn(msg.payload);\n//node.warn(\"rawRoom: \"+ JSON.stringify(rawRoom) );\nvar theRoom = msg.payload.siteId;\n\nif (rawRoom !== null) {\n\tmsg.cmd.room = [];\n\tfor (var i = 0; i < rawRoom.length; i++) {\n\t\tmsg.cmd.room[i] = rawRoom[i].value.value.toLowerCase();\n\t\t//node.warn(\"msg.cmd.room[i]: \"+msg.cmd.room[i] + \"   msg.payload.siteId: \"+msg.payload.siteId);\n\t\tif (msg.cmd.room[i] === \"here\" || msg.cmd.room[i] === \"hier\" || msg.cmd.room[i] === \"ici\") {\n\t\t\ttheRoom = msg.payload.siteId;\n\t\t} else {\n    \t\tif (msg.cmd.room[i] === \"all\" || msg.cmd.room[i] === \"everywhere\" || msg.cmd.room[i] === \"ueberall\" || msg.cmd.room[i] === \"partout\") {\n    \t\t    doAllRooms = true;\n    \t\t} else {\n    \t\t    theRoom = msg.cmd.room[i].replace(/ /g, \"_\");\n    \t\t}\n\t\t}\n\t}\n} \nmsg.payload.siteId = theRoom;\n//node.warn(\" Will use msg.payload.siteId: \"+msg.payload.siteId);\n//global.set(\"siteIdTv\", msg.payload.siteId);\n\nif (rawFavorite !== null) {\n    //node.warn(\"rawFavorite: \"+JSON.stringify(rawFavorite));\n    msg.payload.favorite = rawFavorite[0].value.value.trim().toLowerCase();\n    //node.warn(\"msg.payload.favorite: \"+msg.payload.favorite);\n}\n\n\nif (rawSpeaker !== null) {\n    //node.warn(\"rawSpeaker: \"+JSON.stringify(rawSpeaker));\n    msg.payload.speaker = rawSpeaker[0].value.value.trim().toLowerCase();\n} else {\n    msg.payload.speaker = defaultSpeaker;\n}\n\n//node.warn(\"msg.payload.speaker: \"+msg.payload.speaker);\n\n\nvar msgFav = msg.payload.favorite;\nvar tvFavorites = global.get(\"tvFavorites\");\nvar out = [];\n\nif(msg.payload.favorite === undefined){\n    return ;\n    \n} else {\n\n    for(var i = 0; i<tvFavorites.length; i++){\n        if(msgFav.toLowerCase() == tvFavorites[i].toLowerCase()){\n            out.push([msg]);\n        }else{\n            out.push([]);\n        }\n    }\n    return out;\n}\n\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2114,
        "y": 740,
        "wires": [
            [
                "f2f9ec0b.2899b"
            ],
            [
                "e7d45c95.06ddc"
            ],
            [
                "a731f3fa.5fac2"
            ],
            [
                "bde6ed51.d8c7d"
            ]
        ]
    },
    {
        "id": "f2f9ec0b.2899b",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Num1",
        "name": "Num 1",
        "x": 2384,
        "y": 680,
        "wires": []
    },
    {
        "id": "e7d45c95.06ddc",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Num2",
        "name": "Num 2",
        "x": 2384,
        "y": 720,
        "wires": []
    },
    {
        "id": "bde6ed51.d8c7d",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Num4",
        "name": "Num 4",
        "x": 2384,
        "y": 800,
        "wires": []
    },
    {
        "id": "a731f3fa.5fac2",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Num3",
        "name": "Num 3",
        "x": 2384,
        "y": 760,
        "wires": []
    },
    {
        "id": "df23ef8c.0ad4d",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "appControl:1.0:getApplicationList",
        "payload": "",
        "name": "App List",
        "x": 2054,
        "y": 840,
        "wires": [
            [
                "338f3432.89172c"
            ]
        ]
    },
    {
        "id": "f4729d18.cd08",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1789,
        "y": 860,
        "wires": [
            [
                "df23ef8c.0ad4d",
                "d16c082b.0dea68"
            ]
        ],
        "l": false
    },
    {
        "id": "338f3432.89172c",
        "type": "file",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "AppList",
        "filename": "AppList",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2194,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "b652f4e3.a82978",
        "type": "json",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1969,
        "y": 380,
        "wires": [
            [
                "725135ef.a71ebc"
            ]
        ],
        "l": false
    },
    {
        "id": "725135ef.a71ebc",
        "type": "file",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "tvPlay",
        "filename": "tvPlay",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2064,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "d16c082b.0dea68",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:getRemoteControllerInfo",
        "payload": "",
        "name": "Remote Controller Info",
        "x": 2014,
        "y": 880,
        "wires": [
            [
                "91dd6a66.2e2ea8"
            ]
        ]
    },
    {
        "id": "91dd6a66.2e2ea8",
        "type": "file",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "RemoteInfo",
        "filename": "RemoteInfo",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2204,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "1eb18ebc.e2e781",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "AppTvFavorites",
        "func": "function findObjectByKey(array, key, value) {\n\titems = [];\n\tvar cpt = 0;\n\tfor (var i = 0; i < array.length; i++) {\n\t\tif (array[i][key].toLowerCase() === value.toLowerCase()) {\n\t\t\titems[cpt] = array[i];\n\t\t\tcpt++;\n\t\t}\n\t}\n\tif (items[0] !== undefined) {\n\t\treturn items;\n\t} else {\n\t\treturn null;\n\t}\n}\n\nmsg.cmd={};\nmsg.payload = JSON.parse(msg.payload);\nvar find = global.get(\"msg.payload.favorite\");\n\nif(find === \"disney plus\"){\n    find = \"Disney+\";\n}\n\nvar app = findObjectByKey(msg.payload, 'title', find);\n\n//node.warn(app);\n\nif(app === null){\n    \n    return [null, msg];\n    \n}else {\n    msg.payload = \"{\\\"uri\\\":\\\"\" + app[0].uri + \"\\\"}\";\n    return [msg, null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1894,
        "y": 660,
        "wires": [
            [
                "e1aeccd5.865d1"
            ],
            [
                "953a0339.708a3"
            ]
        ]
    },
    {
        "id": "95ab0235.f997b",
        "type": "file in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "AppList",
        "filename": "AppList",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1769,
        "y": 660,
        "wires": [
            [
                "1eb18ebc.e2e781"
            ]
        ],
        "l": false
    },
    {
        "id": "e1aeccd5.865d1",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "appControl:1.0:setActiveApp",
        "payload": "",
        "name": "setActiveApp",
        "x": 2084,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "ce173f74.57801",
        "type": "file in",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "tvPlay",
        "filename": "tvPlay",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 1969,
        "y": 740,
        "wires": [
            [
                "5f5abf63.aebd5"
            ]
        ],
        "l": false
    },
    {
        "id": "15f5de75.827e92",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "HANDLE PLAY",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2409,
        "y": 440,
        "wires": [],
        "l": false
    },
    {
        "id": "1c4d3b90.4321b4",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:setPowerStatus",
        "payload": "{\"status\":true}",
        "name": "Power on",
        "x": 2209,
        "y": 480,
        "wires": [
            [
                "95ab0235.f997b"
            ]
        ],
        "l": false
    },
    {
        "id": "953a0339.708a3",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "appControl:1.0:terminateApps",
        "payload": "",
        "name": "Terminate App",
        "x": 1854,
        "y": 740,
        "wires": [
            [
                "ce173f74.57801"
            ]
        ]
    },
    {
        "id": "ac9a308.72f4ad",
        "type": "switch",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Is TV On?",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "standby",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2149,
        "y": 500,
        "wires": [
            [
                "1c4d3b90.4321b4"
            ],
            [
                "95ab0235.f997b"
            ]
        ],
        "l": false
    },
    {
        "id": "719f97dd.675098",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:getPowerStatus",
        "payload": "",
        "name": "TV status",
        "x": 2089,
        "y": 500,
        "wires": [
            [
                "ac9a308.72f4ad"
            ]
        ],
        "l": false
    },
    {
        "id": "b3224791.357ba8",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "func": "//set siteIdTv\n\nvar siteIdTv = \"default\";\n\nString.prototype.sansAccent = function() {\n    var accent = [\n        /[\\300-\\306]/g, /[\\340-\\346]/g, // A, a\n        /[\\310-\\313]/g, /[\\350-\\353]/g, // E, e\n        /[\\314-\\317]/g, /[\\354-\\357]/g, // I, i\n        /[\\322-\\330]/g, /[\\362-\\370]/g, // O, o\n        /[\\331-\\334]/g, /[\\371-\\374]/g, // U, u\n        /[\\321]/g, /[\\361]/g, // N, n\n        /[\\307]/g, /[\\347]/g, // C, c\n    ];\n    var noaccent = ['A','a','E','e','I','i','O','o','U','u','N','n','C','c'];\n         \n    var str = this;\n    for(var i = 0; i < accent.length; i++){\n        str = str.replace(\"ä\", \"ae\");\n        str = str.replace(\"ü\", \"ue\");\n        str = str.replace(\"ö\", \"oe\");        \n        str = str.replace(accent[i], noaccent[i]);\n    }\n    return str;\n};\n\n\nglobal.set(\"siteIdTv\", siteIdTv.sansAccent()); \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1889,
        "y": 1620,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "924a80a2.5c18b",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "set siteIdTv",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1809,
        "y": 1620,
        "wires": [
            [
                "b3224791.357ba8"
            ]
        ],
        "l": false
    },
    {
        "id": "758850aa.4b85c",
        "type": "link out",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "links": [
            "3bd57099.afbdb8"
        ],
        "x": 1989,
        "y": 420,
        "wires": []
    },
    {
        "id": "57c47883.4cba68",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "GET /siteIdTv ",
        "func": "var siteIdTv = global.get(\"siteIdTv\");\n\nif(msg.payload.siteId.replace(/_/g, \"\") !== siteIdTv.replace(/ /g, \"\")){\n    return;\n}else{\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2009,
        "y": 220,
        "wires": [
            [
                "5d8b982c.24e408"
            ]
        ],
        "l": false
    },
    {
        "id": "c63e6d3f.90cfc",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "GET /siteIdTv ",
        "func": "var siteIdTv = global.get(\"siteIdTv\");\n\nif(msg.payload.siteId.replace(/_/g, \"\") !== siteIdTv.replace(/ /g, \"\")){\n    return;\n}else{\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1969,
        "y": 309,
        "wires": [
            [
                "38b23f91.9a0f7"
            ]
        ],
        "l": false
    },
    {
        "id": "e51a34e9.dbb8f8",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Manually set the siteIdTv",
        "info": "Here is the place to set your own siteIdTv, the place where you place your TV. (eg: bedroom, office, living room)\n\nThe siteIdTv's room must be from the listed room in the PRATGLAD's website. (see PRATGLAD's user interface -> Configure -> no. 3 -> Settings -> Rooms)",
        "x": 1884,
        "y": 1580,
        "wires": []
    },
    {
        "id": "ad50bf1d.3c9e",
        "type": "switch",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Is TV On?",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "standby",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2149,
        "y": 220,
        "wires": [
            [],
            [
                "3e4adc64.3a7f14"
            ]
        ],
        "l": false
    },
    {
        "id": "5d8b982c.24e408",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:getPowerStatus",
        "payload": "",
        "name": "TV status",
        "x": 2089,
        "y": 220,
        "wires": [
            [
                "ad50bf1d.3c9e"
            ]
        ],
        "l": false
    },
    {
        "id": "38b23f91.9a0f7",
        "type": "bravia-api",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "method": "system:1.0:getPowerStatus",
        "payload": "",
        "name": "TV status",
        "x": 2069,
        "y": 309,
        "wires": [
            [
                "b8d70fbc.245e1"
            ]
        ],
        "l": false
    },
    {
        "id": "b8d70fbc.245e1",
        "type": "switch",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Is TV On?",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "standby",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "active",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2149,
        "y": 309,
        "wires": [
            [],
            [
                "a7a77e3f.689b7"
            ]
        ],
        "l": false
    },
    {
        "id": "b7d3e66f.b558c8",
        "type": "change",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "Set defaultSpeaker (value: \"tv\" or \"speaker\")",
        "rules": [
            {
                "t": "set",
                "p": "defaultSpeaker",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2029,
        "y": 540,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "575200b1.568b9",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "",
        "func": "msg.payload = \"tv\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1889,
        "y": 540,
        "wires": [
            [
                "b7d3e66f.b558c8"
            ]
        ],
        "l": false
    },
    {
        "id": "bcbaccb8.b9f99",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "name": "HANDLE PAUSE",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2189,
        "y": 1120,
        "wires": [],
        "l": false
    },
    {
        "id": "c006e058.1cac2",
        "type": "bravia-ircc",
        "z": "eb3e4041.662fc8",
        "g": "d8e2fe77.61881",
        "tv": "ae9e41f4.ed083",
        "ircc": "Pause",
        "name": "Pause",
        "x": 2064,
        "y": 1120,
        "wires": []
    },
    {
        "id": "f96ab142.d8bab8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "ae9e41f4.ed083",
        "type": "bravia-tv",
        "name": "SONY BRAVIA TV",
        "host": "192.168.1.49",
        "port": "80",
        "psk": "1111",
        "timeout": "5000"
    }
]