[
    {
        "id": "29001ccc.fe8c44",
        "type": "tab",
        "label": "Custom Device - Philips Hue",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8ef00a1b.4c2c58",
        "type": "group",
        "z": "29001ccc.fe8c44",
        "name": "PHILIPS CUSTOM DEVICES",
        "style": {
            "label": true,
            "stroke": "#9363b7",
            "color": "#9363b7"
        },
        "nodes": [
            "b41bd6a9.5ec7c8",
            "2e594dd7.dbb292",
            "e0095ef4.b707e",
            "e6985e51.a9bc6",
            "ecac9fd4.8e8b6",
            "560815.c54357ec",
            "503adf7a.3042a",
            "dcee0519.290698",
            "348b5771.8b0b38",
            "f8a7e821.8cf4f8",
            "40027f19.1d4a4",
            "9856b242.4e9bc",
            "449e3d3a.509a94",
            "8603c0b6.103fb",
            "3bb1e1f3.1d483e",
            "3debbb01.759d64",
            "897ca31e.c478f",
            "71d1758b.1a9e7c",
            "9a9e7ec4.cd09b",
            "6d52e10c.cdeca",
            "be137e94.0121c",
            "9ffad899.d66238",
            "eebaaf9e.b777d",
            "2ac44ab7.dd4606",
            "5cb91532.326b3c",
            "12cefaca.546dc5",
            "53112a3b.7ab4c4",
            "b969abf1.b34e48",
            "8bc40ec3.ee302",
            "cb4a0df4.04195",
            "4438380a.27fe58",
            "8d68b10.411c25",
            "260ebad6.9a5086",
            "428088d9.6edc38",
            "7ed54635.37b788",
            "1c09a641.9ce38a",
            "5f37127c.784fac",
            "3fd1aefa.9ea4e2",
            "71c7fc49.4844a4",
            "91552b63.6bda78",
            "c4cffb97.7397a8",
            "3118bea4.cb4bf2",
            "abcd454a.5cd7a8",
            "b3d39452.587258",
            "f2b991d5.5be04",
            "e067a9f.cab8a58",
            "9a618cce.21d22",
            "9ad75a1d.c6f558"
        ],
        "x": 814,
        "y": 479,
        "w": 742,
        "h": 682
    },
    {
        "id": "e4e45703.630a48",
        "type": "group",
        "z": "29001ccc.fe8c44",
        "name": "UI Dashboard",
        "style": {
            "label": true,
            "stroke": "#3f93cf",
            "color": "#3f93cf"
        },
        "nodes": [
            "971fa92f.bbdf58",
            "fbb7a5ed.02e888",
            "83c54bdf.571d98",
            "13ba90d8.7ccb5f",
            "8c4e3e38.d70bd",
            "ce3284a3.be9898",
            "49056617.aaf598",
            "ef119ad0.5d6638",
            "233ba70b.3ad648",
            "29b2edcc.07b922",
            "9db14f2e.d24ff",
            "bad9780.5131d88",
            "704019cd.48d508",
            "68b2ecfb.590c74",
            "4e3dd355.ebe4fc",
            "7fa6e6b2.d3eda8",
            "f13be781.505978",
            "977eaa34.305a38",
            "406a604d.1dd39",
            "de892613.5c86b8",
            "dca7b284.accf8",
            "3e367278.f3991e",
            "4c4e4d5e.73ab74",
            "65e1d62f.cdbe68",
            "72c4b6b7.63ad58",
            "9c325116.9241b",
            "93c2e6fa.d52918",
            "666bacd3.cfce14",
            "b3bbd68c.7210f8",
            "cb91b63c.b7bb88",
            "da470f45.00609",
            "3f2c0c5e.b64fe4",
            "8f7236d4.a31ca8",
            "7d4abf9a.ac6f7",
            "bf03ae9a.b7b9f",
            "aea284da.294718",
            "11beb601.2d6aba",
            "35d40f16.5af07",
            "8d585752.d8a098",
            "94381859.d400d8",
            "95b7071a.18d1f8",
            "9bb14f34.e0efd",
            "7298f0f9.cae6f",
            "57cd6b7e.717304",
            "93e0356d.d79868",
            "ec2cee50.1777f",
            "fac16f0a.20566",
            "6ea07af1.2d4144",
            "67351fe7.414b4",
            "d66cc3c0.1cd83",
            "cc3c4efa.ff582",
            "3400365d.6d6bca",
            "7658531d.5256fc",
            "a57cb3ce.a472c",
            "634c6561.6e8bac",
            "5e65c931.4c9368",
            "eb21efac.2599",
            "34ec6104.1b4d9e",
            "c0c1fc3e.5778f",
            "f5b05e03.45c1d",
            "aa7a393e.6c88c8",
            "a8aacbef.185b68",
            "7ee608bf.76c2d8",
            "c06ee661.411ad8",
            "4ad7b684.13e168",
            "805e1016.4dad6",
            "6557189e.84d478",
            "63535cbf.ad5294",
            "4f4fbd6b.6d9324",
            "99c0650f.3ff478",
            "8c125c8c.3328b"
        ],
        "x": 14,
        "y": 479,
        "w": 762,
        "h": 1102
    },
    {
        "id": "ebb798d5.9a8828",
        "type": "group",
        "z": "29001ccc.fe8c44",
        "name": "Authentification",
        "style": {
            "label": true,
            "stroke": "#3f93cf",
            "color": "#3f93cf"
        },
        "nodes": [
            "68b84cd5.68c634",
            "9d4718bb.0eb808",
            "985120db.c3cbb",
            "e061c17.124794",
            "56cda581.ded71c",
            "41b62c33.b9bd74",
            "cfdd2bb1.7d7628",
            "f6f614f1.43b2c8",
            "649e66bc.05ec38",
            "34dfff4e.3aa85",
            "88ba39b2.6e5698",
            "fe07a884.c65928",
            "5965b260.56ca5c",
            "8c190857.6a6948",
            "f84cdb6.e0b5728",
            "10f75439.ba954c",
            "6e7c1a09.6abab4",
            "3323b49c.1e682c",
            "51a1641a.ac26ec",
            "d055d965.de1b88",
            "c403768c.2b12f8",
            "c16f05aa.b1d1a8",
            "c007d38b.173c8",
            "cbd28795.a8cfd8",
            "e0c043d6.4963e",
            "3f896629.f7e64a",
            "f9c2564d.1c75d8",
            "de6fc4e.02d4b38",
            "f08d4a54.0c77b8",
            "dbe3fe4e.2bc36",
            "fe70099f.fd8b28",
            "f717cc43.0a4fc",
            "882bae6d.ea506",
            "100d344c.b6b7bc",
            "3572d8b.35a6b28",
            "c69a20bd.b352f",
            "2905a18.eca625e",
            "bdc5e28e.e4022",
            "ccc02263.8b157",
            "ed5cee59.0744b",
            "4498e3af.00002c",
            "bf0c7d0b.2609e",
            "76847b1a.aaac34",
            "81964c90.bac66",
            "454e3b65.73a044",
            "285698d.b872968",
            "5bb4d439.a3958c",
            "53ccdc16.a6cd74",
            "78fc7ee1.8fe94",
            "cb011bc0.985848",
            "f4d6ba8e.623608",
            "a840e52f.867678",
            "e2900a6.70b9bf8",
            "3bf8533b.e7d2ac",
            "cb1609fd.c36af8",
            "eb372443.929838",
            "d8a73167.c3ba4",
            "9673cb4c.311b58",
            "a9bc4bcf.277108",
            "af839520.e89138",
            "9358852b.3b5958",
            "c6fb4ed5.657a9",
            "e87e6a97.bc5c08",
            "bc272725.880108",
            "46369625.99ac88",
            "784660e3.0657a",
            "4ea170f4.02cc5",
            "500dc0ce.8589b",
            "2724ea1e.044196",
            "f47ef26d.c3592"
        ],
        "x": 14,
        "y": 19,
        "w": 1722,
        "h": 442
    },
    {
        "id": "c4cffb97.7397a8",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Save",
        "rules": [
            {
                "t": "set",
                "p": "customDeviceList",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "91552b63.6bda78",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Define manually custom devices",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "[{\"custom\":true,\"name\":\"Office Ceiling\",\"zone\":\"Office\",\"object\":\"Ceiling\",\"type\":\"lights\",\"setOn\":{\"name\":\"On\",\"url\":\"http://<IP_address_Philips_Hue_Bridge>/api/<username>/lights/<Light ID>/state\",\"body\":{\"on\":true}},\"setOff\":{\"name\":\"Off\",\"url\":\"http://<IP_address_Philips_Hue_Bridge>/api/<username>/lights/<Light ID>/state\",\"body\":{\"on\":false}},\"currentState\":{\"name\":\"CurrentState\",\"url\":\"http://<IP_address_Philips_Hue_Bridge>/api/<username>/lights/<Light ID>\",\"parser\":\"philips\",\"id\":0}}]",
        "payloadType": "json",
        "x": 990,
        "y": 600,
        "wires": [
            [
                "c4cffb97.7397a8",
                "b3d39452.587258"
            ]
        ]
    },
    {
        "id": "71c7fc49.4844a4",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "↓ Custom devices - define your Philips devices here ↓",
        "info": "Template for manual custom device definition (here for lights): see inject node below",
        "x": 1040,
        "y": 560,
        "wires": []
    },
    {
        "id": "b41bd6a9.5ec7c8",
        "type": "mqtt in",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "topic": "proknx/custom/cmd",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "2e594dd7.dbb292"
            ]
        ]
    },
    {
        "id": "2e594dd7.dbb292",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 905,
        "y": 1040,
        "wires": [
            [
                "dcee0519.290698"
            ]
        ],
        "l": false
    },
    {
        "id": "e0095ef4.b707e",
        "type": "http request",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1395,
        "y": 1075,
        "wires": [
            [
                "e6985e51.a9bc6"
            ]
        ]
    },
    {
        "id": "e6985e51.a9bc6",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1495,
        "y": 1060,
        "wires": [],
        "l": false
    },
    {
        "id": "ecac9fd4.8e8b6",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Prepare request",
        "func": "msg.device=[];\nif (msg.cmd.type === \"lights\") {\n    if (msg.cmd.value !== undefined) {\n        for (var i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].type === \"dimmers\" && msg.cmd.cmd !== \"off\") {\n               var val = msg.cmd.value/100 * msg.items[i].setBrightness.valueMax;\n               msg.device[i] = msg.items[i].setBrightness;\n               \n               //-------- Modified code ---------//\n               if(msg.items[i].currentStates.parser === \"philips\"){\n                   msg.device[i].body.bri = Math.floor(val);\n               }\n               else{\n                   msg.device[i].value = val;\n               }\n               //-------------------------------//\n               \n            }else if (msg.cmd.value > 0) {\n                msg.device[i] = msg.items[i].setOn;\n            }else {\n                msg.device[i] = msg.items[i].setOff;\n            }\n        }\n    }else if (msg.cmd.cmd === \"on\") {\n        for (var i = 0; i < msg.items.length; i++) {\n            msg.device[i] = msg.items[i].setOn;\t                      \n        }\n    }else if (msg.cmd.cmd === \"off\") {\n        for (var i = 0; i < msg.items.length; i++) {\n            msg.device[i] = msg.items[i].setOff;\n        }\n    }\n}else if (msg.cmd.type === \"aux\") {\n    if (msg.cmd.cmd === \"on\" || msg.cmd.cmd === \"set\") {\n        if (msg.cmd.value !== undefined) {\n          for (var i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].setBrightness !== undefined) {\n                var val = msg.cmd.value;\n                val = precisionRound(val, 1);\n                msg.device[i] = msg.items[i].setBrightness;\n                msg.device[i].value = val;\n            } \n            else if (msg.cmd.value > 0) {\n               msg.device[i] = msg.items[i].setOn;\n            }\n            else {\n               msg.device[i] = msg.items[i].setOff;\n            }\t\t\t\t         \n        }\n        }else {\n            for (var i = 0; i < msg.items.length; i++) {\n                msg.device[i] = msg.items[i].setOn;\n            }\n        }\n    }else if (msg.cmd.cmd === \"off\") {\n        for (var i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].setOff !== undefined) {\n                msg.device[i] = msg.items[i].setOff;\n            }\n        }\n    }\n}\n//-------- Added code --------//\nelse if (msg.cmd.type === \"scenes\") {\n    if (msg.cmd.cmd === \"on\"){\n        for (let i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].setOn !== undefined) {\n                msg.device[i] = msg.items[i].setOn;\n            }\n        }\n    }\n}\n//----------------------------//\n \nflow.set(\"msgDevice\",msg.device) ; //contain command info of the device\nflow.set(\"msgItems\",msg.items); // contain list of devices concerned\nflow.set(\"msgCmd\", msg.cmd);\nmsg.payload = msg.device;\n  \nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1135,
        "y": 1080,
        "wires": [
            [
                "503adf7a.3042a"
            ]
        ],
        "l": false
    },
    {
        "id": "560815.c54357ec",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Cmd ?",
        "property": "cmd.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "increase",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "decrease",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1030,
        "y": 1040,
        "wires": [
            [
                "449e3d3a.509a94"
            ],
            [
                "449e3d3a.509a94"
            ],
            [
                "ecac9fd4.8e8b6"
            ],
            [
                "ecac9fd4.8e8b6"
            ],
            [
                "ecac9fd4.8e8b6"
            ]
        ]
    },
    {
        "id": "503adf7a.3042a",
        "type": "split",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1195,
        "y": 1100,
        "wires": [
            [
                "7ed54635.37b788"
            ]
        ],
        "l": false
    },
    {
        "id": "dcee0519.290698",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "move data from payload",
        "rules": [
            {
                "t": "set",
                "p": "cmd",
                "pt": "msg",
                "to": "payload.cmd",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "items",
                "pt": "msg",
                "to": "payload.items",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 955,
        "y": 1040,
        "wires": [
            [
                "560815.c54357ec"
            ]
        ],
        "l": false
    },
    {
        "id": "348b5771.8b0b38",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Replace value and set url",
        "rules": [
            {
                "t": "change",
                "p": "payload.url",
                "pt": "msg",
                "from": "{value}",
                "fromt": "str",
                "to": "payload.value",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload.url",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 1075,
        "wires": [
            [
                "e0095ef4.b707e"
            ]
        ],
        "l": false
    },
    {
        "id": "f8a7e821.8cf4f8",
        "type": "mqtt in",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "topic": "proknx/custom/query",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 930,
        "y": 950,
        "wires": [
            [
                "40027f19.1d4a4"
            ]
        ]
    },
    {
        "id": "40027f19.1d4a4",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1075,
        "y": 950,
        "wires": [
            [
                "9856b242.4e9bc"
            ]
        ],
        "l": false
    },
    {
        "id": "9856b242.4e9bc",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "move data from payload",
        "rules": [
            {
                "t": "set",
                "p": "cmd",
                "pt": "msg",
                "to": "payload.cmd",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "items",
                "pt": "msg",
                "to": "payload.items",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1125,
        "y": 950,
        "wires": [
            [
                "8603c0b6.103fb"
            ]
        ],
        "l": false
    },
    {
        "id": "449e3d3a.509a94",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "GET Current",
        "func": "msg.device = [];\n\nif (msg.cmd.type === \"aux\" || msg.cmd.type === \"lights\" || msg.cmd.type === \"dimmers\" ) {\n    var cptok=0;\n    var cpter=0;\n    msg.itemsok=[];\n    msg.itemser=[];\n    for (var i = 0; i < msg.items.length; i++) {\n        if(msg.items[i].currentState !== undefined && msg.items[i].type !== \"lights\") {\n            msg.itemsok[cptok]=msg.items[i];\n            cptok++;\n        } else {\n            msg.itemser[cpter]=msg.items[i];\n            cpter++;\n        }\n    }\n    if (msg.itemsok[0] !== undefined) {\n        msg.items = msg.itemsok;\n        for (var i = 0; i < msg.itemsok.length; i++) {\n\t\t\tmsg.device[i] = msg.itemsok[i].currentState;\n        }\n        msg.payload = msg.device;\n        delete msg.device;\n        flow.set(\"msgDevice\", msg.device);\n        flow.set(\"msgItems\", msg.items);\n        flow.set(\"msgCmd\", msg.cmd);\n        return [msg, null];\n    }\n\n    if (msg.itemser.length > 0 && msg.itemsok.length === 0) {\n        if (msg.itemser.length > 1) {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" und \";\n                text3 = msg.itemser.length-1;\n                text4 = \" andere Geräte verstehen diesen Befehl nicht\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" et \";\n                text3 = msg.itemser.length-1;\n                text4 = \" autres appareils ne supportent pas cette commande\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" and \";\n                text3 = msg.itemser.length-1;\n                text4 = \" other devices do not support this command\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        } else {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" versteht diesen Befehl nicht\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" ne supporte pas cette commande\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" does not support this command\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        }\n    }\n    flow.set(\"msgError\", msg.error);\n    flow.set(\"msgCmd\", msg.cmd);\n    return [null, msg];\n}",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1135,
        "y": 1020,
        "wires": [
            [
                "4438380a.27fe58"
            ],
            [
                "3bb1e1f3.1d483e"
            ]
        ],
        "l": false
    },
    {
        "id": "8603c0b6.103fb",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "GET_Current",
        "func": "\nmsg.device = [];\ndeviceList = msg.deviceList;\n\nif ( msg.cmd.type === \"aux\" || msg.cmd.type === \"lights\" || msg.cmd.type === \"dimmers\" || msg.cmd.type === \"sensor\") {\n    var cptok=0;\n    var cpter=0;\n    msg.itemsok=[];\n    msg.itemser=[];\n    for (var i = 0; i < msg.items.length; i++) {\n        if(msg.items[i].currentState !== undefined) {\n            msg.itemsok[cptok]=msg.items[i];\n            cptok++;\n        } else {\n            msg.itemser[cpter]=msg.items[i];\n            cpter++;\n        }\n    }\n    if (msg.itemsok[0] !== undefined) {\n        msg.items = msg.itemsok;\n        for (var i = 0; i < msg.itemsok.length; i++) {\n\t\t    msg.device[i] = msg.itemsok[i].currentState;   \n        }\n        msg.payload = msg.device;\n \t    flow.set(\"msgDevice\", msg.device);\n        flow.set(\"msgItems\", msg.items);\n        flow.set(\"msgCmd\", msg.cmd);\n\t    delete msg.device;\n        return [msg, null];\n    }\n\n    if (msg.itemser.length > 0 && msg.itemsok.length === 0) {\n        if (msg.itemser.length > 1) {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" und \";\n                text3 = msg.itemser.length-1;\n                text4 = \" andere GerÃ¤te verstehen diesen Befehl nicht\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" et \";\n                text3 = msg.itemser.length-1;\n                text4 = \" autres appareils ne supportent pas cette commande\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" and \";\n                text3 = msg.itemser.length-1;\n                text4 = \" other devices do not support this command\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        } else {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" versteht diesen Befehl nicht\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" ne supporte pas cette commande\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" does not support this command\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        }\n    }\n    flow.set(\"msgError\", msg.error);\n    flow.set(\"msgCmd\", msg.cmd);\n\n    return [null, msg];\n}",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1175,
        "y": 950,
        "wires": [
            [
                "897ca31e.c478f"
            ],
            [
                "3debbb01.759d64"
            ]
        ],
        "l": false
    },
    {
        "id": "3bb1e1f3.1d483e",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "ERROR TO FEEDBACK",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 1185,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3debbb01.759d64",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "ERROR TO FEEDBACK",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 1255,
        "y": 970,
        "wires": []
    },
    {
        "id": "897ca31e.c478f",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Query",
        "func": "msg.device = msg.payload;\nmsg.payload = [];\nfor(var i = 0; i < msg.device.length ; i++){\n    msg.payload[i] = msg.device[i];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 905,
        "y": 900,
        "wires": [
            [
                "71d1758b.1a9e7c"
            ]
        ],
        "l": false
    },
    {
        "id": "71d1758b.1a9e7c",
        "type": "split",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "split",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 955,
        "y": 900,
        "wires": [
            [
                "6d52e10c.cdeca"
            ]
        ],
        "l": false
    },
    {
        "id": "9a9e7ec4.cd09b",
        "type": "http request",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1090,
        "y": 900,
        "wires": [
            [
                "2ac44ab7.dd4606"
            ]
        ]
    },
    {
        "id": "6d52e10c.cdeca",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Replace value and set url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload.url",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1005,
        "y": 900,
        "wires": [
            [
                "9a9e7ec4.cd09b"
            ]
        ],
        "l": false
    },
    {
        "id": "be137e94.0121c",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Parser Philips",
        "func": "msg.states = [];\nfor(var i=0; i < msg.payload.length ; i++){\n    try{\n        switch (msg.items[i].currentState.parser.toLowerCase()){\n                \n            case \"philips\":\n                if(msg.items[i].type === \"dimmers\"){\n                    var value = \"0\";\n                    let index = msg.items[i].currentState.id;\n                    if(msg.payload[i].state.on){\n                        value = msg.payload[i].state.bri.toString();\n                    }        \n                    msg.states[i]={\n                        \"Data\" : [{\n                            \"Value\" : value\n                        }]\n                    };     \n                }\n                else if(msg.items[i].type === \"lights\"){\n                    let index = msg.items[i].currentState.id;\n                    msg.states[i] = {\n                        \"Data\" : [{\n                            \"Value\" : (msg.payload[i].state.on) ? true : false\n                        }]\n                    };\n                }\n                break;\n                \n            default:\n                node.warn(\"Missing parser for \"+msg.items[i].currentState.parser)\n        }\n    } catch(e){\n        node.warn(\"Exception parsing Philips reply: \"+e);\n    }\n\n    if(msg.states[i].Data[0].Value !== undefined){\n        msg.states[i].Result=true;\n    }else{\n        msg.states[i].Result=false;\n    }\n}\n \nmsg.payload=msg.states;\ndelete msg.states;\nif(msg.cmd.cmd !== undefined){\n    msg.command = true;\n}else{\n    msg.command = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 940,
        "y": 830,
        "wires": [
            [
                "5cb91532.326b3c"
            ]
        ]
    },
    {
        "id": "9ffad899.d66238",
        "type": "join",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1275,
        "y": 890,
        "wires": [
            [
                "be137e94.0121c"
            ]
        ],
        "l": false
    },
    {
        "id": "eebaaf9e.b777d",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1265,
        "y": 930,
        "wires": [],
        "l": false
    },
    {
        "id": "2ac44ab7.dd4606",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1175,
        "y": 900,
        "wires": [
            [
                "b969abf1.b34e48"
            ],
            [
                "eebaaf9e.b777d"
            ]
        ],
        "l": false
    },
    {
        "id": "5cb91532.326b3c",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "command or query?",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1065,
        "y": 830,
        "wires": [
            [
                "12cefaca.546dc5"
            ],
            [
                "53112a3b.7ab4c4"
            ]
        ],
        "outputLabels": [
            "if query",
            "if command"
        ],
        "l": false
    },
    {
        "id": "12cefaca.546dc5",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "FEEDBACK",
        "links": [
            "a1b4e119.a687c8"
        ],
        "x": 1115,
        "y": 800,
        "wires": []
    },
    {
        "id": "53112a3b.7ab4c4",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "CONTINUE COMMAND OUT",
        "links": [
            "cb4a0df4.04195"
        ],
        "x": 1115,
        "y": 840,
        "wires": []
    },
    {
        "id": "b969abf1.b34e48",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1235,
        "y": 890,
        "wires": [
            [
                "9ffad899.d66238"
            ]
        ],
        "l": false
    },
    {
        "id": "8bc40ec3.ee302",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Prepare request",
        "func": "function precisionRound(number, precision) {\n   var factor = Math.pow(10, precision);\n   return Math.round(number * factor) / factor;\n}\ndelete msg.type;\ndelete msg.headers;\ndelete msg.certificate;\nmsg.device = [];\nmsg.current = msg.payload;\nmsg.newVal = [];\nif (msg.cmd.type === \"lights\" && msg.cmd.cmd === \"increase\") {\n   cptok = 0;\n   for (var i = 0; i < msg.items.length; i++) {\n      if (msg.items[i].type === \"dimmers\") {\n         if (msg.cmd.value !== undefined) {\n            var val = msg.cmd.value / 100 * msg.items[i].setBrightness.valueMax;\n            val = precisionRound(val, 1);\n            var newVal = parseInt(msg.current[i].Data[0].Value) + val;\n            if (newVal > msg.items[i].setBrightness.valueMax) {\n               newVal = msg.items[i].setBrightness.valueMax;\n            }\n            newVal = precisionRound(newVal, 1);\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].value = newVal;\n            cptok++;\n         } else {\n            var newVal = parseInt(msg.current[i].Data[0].Value) + (0.2 * msg.items[i].setBrightness.valueMax);\n            if (newVal > msg.items[i].setBrightness.valueMax) {\n               newVal = msg.items[i].setBrightness.valueMax;\n            }\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].value = newVal;\n            cptok++;\n         }\n      }\n   }\n} else if (msg.cmd.type === \"lights\" && msg.cmd.cmd === \"decrease\") {\n   cptok = 0;\n   for (var i = 0; i < msg.items.length; i++) {\n      if (msg.items[i].type === \"dimmers\") {\n         if (msg.cmd.value !== undefined) {\n            var val = msg.cmd.value / 100 * msg.items[i].setBrightness.valueMax;\n            val = precisionRound(val, 1);\n            var newVal = parseInt(msg.current[i].Data[0].Value) - val;\n            if (newVal < msg.items[i].setBrightness.valueMin) {\n               newVal = msg.items[i].setBrightness.valueMin;\n            }\n            newVal = precisionRound(newVal, 1);\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].value = newVal;\n            cptok++;\n         } else {\n            var newVal = parseInt(msg.current[i].Data[0].Value) - (0.2 * msg.items[i].setBrightness.valueMax);\n            if (newVal < msg.items[i].setBrightness.valueMin) {\n               newVal = msg.items[i].setBrightness.valueMin;\n            }\n            newVal = precisionRound(newVal, 1);\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].value = newVal;\n            cptok++;\n         }\n      }\n   }\n}\n\nmsg.payload = msg.device;\ndelete msg.url;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1135,
        "y": 1120,
        "wires": [
            [
                "503adf7a.3042a"
            ]
        ],
        "l": false
    },
    {
        "id": "cb4a0df4.04195",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "CONTINUE COMMAND IN",
        "links": [
            "53112a3b.7ab4c4"
        ],
        "x": 1085,
        "y": 1120,
        "wires": [
            [
                "8bc40ec3.ee302"
            ]
        ]
    },
    {
        "id": "4438380a.27fe58",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "CONTINUE QUERY OUT",
        "links": [
            "8d68b10.411c25"
        ],
        "x": 1185,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8d68b10.411c25",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "CONTINUE QUERY IN",
        "links": [
            "4438380a.27fe58"
        ],
        "x": 855,
        "y": 880,
        "wires": [
            [
                "897ca31e.c478f"
            ]
        ]
    },
    {
        "id": "260ebad6.9a5086",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Readme Parser!",
        "info": "The parser for each device is defined in the device definition (see below).\nWhen you add a device from a different vendor, you must also modify the parser code below to handle the response.\n\n\"currentState\": {\n    \"name\": \"CurrentBrightness\",\n    \"url\": \"http://192.168.1.200/status\",\n    **\"parser\": \"shelly\",**\n    \"valueMin\": 0,\n    \"valueMax\": 100\n}",
        "x": 940,
        "y": 799,
        "wires": []
    },
    {
        "id": "428088d9.6edc38",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "INFO / README",
        "info": "- This group, CUSTOM DEVICES, enables voice control of custom devices, i.e. apart from the devices of the main Gateway you can add-on here.\n- \n- Any device that can be controlled via HTTP can be  integrataded here.\n- \n- This sample demonstrates how to declare (publish) your custom devices, in this case Philips lamp.",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "7ed54635.37b788",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Specific body request?",
        "property": "payload.body",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1246,
        "y": 1100,
        "wires": [
            [
                "348b5771.8b0b38"
            ],
            [
                "3fd1aefa.9ea4e2"
            ]
        ],
        "l": false
    },
    {
        "id": "1c09a641.9ce38a",
        "type": "http request",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "http [PUT]",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1388,
        "y": 1115,
        "wires": [
            [
                "5f37127c.784fac"
            ]
        ]
    },
    {
        "id": "5f37127c.784fac",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1495,
        "y": 1120,
        "wires": [],
        "l": false
    },
    {
        "id": "3fd1aefa.9ea4e2",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Add specific body to http request",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload.url",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.body",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 1115,
        "wires": [
            [
                "1c09a641.9ce38a"
            ]
        ],
        "l": false
    },
    {
        "id": "3118bea4.cb4bf2",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Automatic CustomDeviceList for Philips Hue",
        "func": "// Get devices that are defined in Philips Hue bridge\n// And set them into the right format\nlet devices = [];\n\n// Bridge Ip address\nconst ipAddress = flow.get(\"bridgeIpAddress\");\n// node.error(\"IP address: \" + ipAddress);\n\n// Username\nlet username = flow.get(\"bridgeApiKey\");\n\n// Groups (zone)\nlet groups = msg.payload.groups;\n// node.warn(groups);\n\n//-------------------- Lights --------------------//\nlet lights = msg.payload.lights;\n\nif(lights !== undefined){\n    for(const obj in lights){\n        \n        // Template for lights\n        let light = \n            {\n                \"custom\": true,\n                \"name\": \"\",\n                \"zone\": \"\",\n                \"object\": \"\",\n                \"type\": \"dimmers\",\n                \"setOn\": {\n                    \"name\": \"On\",\n                    \"url\": \"\",\n                    \"body\": {\n                        \"on\": true\n                    }\n                },\n                \"setOff\": {\n                    \"name\": \"Off\",\n                    \"url\": \"\",\n                    \"body\": {\n                        \"on\": false\n                    }\n                },\n                \"setBrightness\": {\n                  \"name\": \"Brightness\",\n                  \"url\" : \"\",\n                  \"valueMin\":1,\n                  \"valueMax\":254,\n                  \"body\": {\n                      \"on\": true,\n                      \"bri\": 127\n                  }\n                },\n                \"currentStates\": {\n                    \"name\": \"CurrentBrightness\",\n                    \"url\": \"\",\n                    \"parser\": \"philips\",\n                    \"id\": 0,\n                    \"valueMin\": 1,\n                    \"valueMax\": 254\n                }\n            }\n        \n        // Light id for url\n        let lightID = obj;\n        \n        // Zone\n        for(const grp in groups){\n            if(groups[grp].lights.length !== 0){\n                // At least one light is part of the group\n                for(let i=0; i < groups[grp].lights.length; ++i){\n                    if(groups[grp].lights[i] === lightID){\n                        // Get zone\n                        light.zone = groups[grp].name;\n                    }\n                }\n            }\n            else{\n                // No light is part of the group\n                light.zone = \"Default\";\n            }\n        }\n        // Object (light name)\n        light.object = lights[obj].name;\n    \n        // Name\n        light.name = light.zone+\" \"+light.object;\n        \n        // On\n        light.setOn.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID+\"/state\";\n        // Off\n        light.setOff.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID+\"/state\";\n        // Brightness\n        light.setBrightness.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID+\"/state\";\n        // State\n        light.currentStates.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID;\n        light.currentStates.id= lightID;\n        \n        // Add light to msgDeviceList\n        devices.push(light);\n        \n        \n        // node.warn(light);\n        // node.warn(devices);\n    }\n}\n\n//-------------------- Sensors --------------------//\nlet sensors = msg.payload.sensors;\n\nif(sensors !== undefined){\n    for(const obj in sensors){\n        \n        // Template for sensors\n        let sensor = \n            {\n                \"custom\": true,\n                \"name\": \"\",\n                \"type\": \"sensor\",\n                \"zone\": \"\",\n                \"object\": \"\",\n                \"currentStates\": [\n                    {\n                        \"name\": \"CurrentValue\",\n                        \"url\": \"\",\n                        \"parser\": \"philips\",\n                        \"id\": 0\n                    }\n                ]\n            }\n        \n        // sensor id for url\n        let sensorID = obj;\n        \n        // Zone\n        for(const grp in groups){\n            if(groups[grp].sensors.length !== 0){\n                // At least one sensor is part of the group\n                for(let i=0; i < groups[grp].sensors.length; ++i){\n                    if(groups[grp].sensors[i] === sensorID){\n                        // Get zone\n                        sensor.zone = groups[grp].name;\n                    }\n                }\n            }\n            else{\n                // No sensor is part of the group\n                sensor.zone = \"Default\";\n            }\n        }\n        // Sensor name\n        sensor.name = sensors[obj].name;\n        \n        // State\n        sensor.currentStates.url= \"http://\"+ipAddress+\"/api/\"+username+\"/sensors/\"+sensorID;\n        sensor.currentStates.id= sensorID;\n        \n        // Add sensor to msgDeviceList\n        devices.push(sensor);\n        \n        // node.warn(sensor);\n        // node.warn(devices);\n    }\n}\n\n//-------------------- Scenes --------------------//\nlet scenes = msg.payload.scenes;\n\nif(scenes !== undefined){\n    for(const obj in scenes){\n        \n        // Template for scene\n        let scene = \n            {\n                \"custom\": true,\n                \"name\": \"\",\n                \"type\": \"scenes\",\n                \"zone\": \"\",\n                \"object\": \"\",\n                \"group\": \"\",\n                \"setOn\":\n                    {\n                        \"name\": \"On\",\n                        \"url\": \"\",\n                        \"body\": {\n                            \"scene\": \"\"\n                        }\n                    }\n            }\n        \n        // scene id for url\n        let sceneID = obj;\n        \n        // Group & zone\n        if(scenes[obj].hasOwnProperty(\"group\") && scenes[obj].group !== \"\" && scenes[obj].group !== undefined){\n            scene.group = scenes[obj].group;\n            scene.zone = groups[parseInt(scene.group, 10)].name;\n        }\n        else{\n            // No scene is part of the group: default group & serverSiteId as zone\n            scene.group = \"0\";\n            let serverSiteId = global.get(\"msgServerSiteId\");\n            serverSiteId = serverSiteId.replace('_', ' ');\n            serverSiteId = serverSiteId.charAt(0).toUpperCase() + serverSiteId.slice(1);\n            \n            scene.zone = serverSiteId;\n        }\n        \n        // Object \n        scene.object = scenes[obj].name;\n        // Name\n        scene.name = scene.zone+\" \"+scene.object;\n        \n        // State\n        scene.setOn.url= \"http://\"+ipAddress+\"/api/\"+username+\"/groups/\"+scene.group+\"/action/\";\n        scene.setOn.body.scene = sceneID;\n        \n        // Add scene to msgDeviceList\n        devices.push(scene);\n        \n        // node.warn(scene);\n        // node.warn(devices);\n    }\n}\n\nmsg.payload = devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1255,
        "y": 680,
        "wires": [
            [
                "b3d39452.587258",
                "c4cffb97.7397a8",
                "9ad75a1d.c6f558"
            ]
        ],
        "l": false
    },
    {
        "id": "abcd454a.5cd7a8",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Automatic customDeviceList (debug)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 680,
        "wires": [
            [
                "9a618cce.21d22"
            ]
        ]
    },
    {
        "id": "b3d39452.587258",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1355,
        "y": 680,
        "wires": [],
        "l": false
    },
    {
        "id": "f2b991d5.5be04",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "↓ Custom devices - automatically define your Philips devices ↓",
        "info": "",
        "x": 1060,
        "y": 640,
        "wires": []
    },
    {
        "id": "e067a9f.cab8a58",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "AUTO DEVICE LIST IN",
        "links": [
            "9bcfbaae.298fc8",
            "ccc02263.8b157"
        ],
        "x": 1115,
        "y": 720,
        "wires": [
            [
                "9a618cce.21d22"
            ]
        ]
    },
    {
        "id": "9a618cce.21d22",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "Login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1195,
        "y": 680,
        "wires": [
            [
                "3118bea4.cb4bf2"
            ]
        ],
        "l": false
    },
    {
        "id": "9ad75a1d.c6f558",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "8ef00a1b.4c2c58",
        "name": "UI UPDATE DEVICE LIST OUT",
        "links": [
            "93e0356d.d79868"
        ],
        "x": 1355,
        "y": 720,
        "wires": []
    },
    {
        "id": "971fa92f.bbdf58",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 235,
        "y": 1460,
        "wires": [],
        "l": false
    },
    {
        "id": "fbb7a5ed.02e888",
        "type": "http request",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Create new user (once only)",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 335,
        "y": 660,
        "wires": [
            [
                "eb21efac.2599"
            ]
        ],
        "l": false
    },
    {
        "id": "83c54bdf.571d98",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "d": true,
        "g": "e4e45703.630a48",
        "name": "Create new user (debug)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"devicetype\":\"my_hue_app#phone default_user\"}",
        "payloadType": "json",
        "x": 95,
        "y": 680,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "13ba90d8.7ccb5f",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 455,
        "y": 640,
        "wires": [
            [
                "29b2edcc.07b922"
            ]
        ],
        "l": false
    },
    {
        "id": "8c4e3e38.d70bd",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "http://{{bridgeIpAddress}}/api",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 215,
        "y": 660,
        "wires": [
            [
                "ce3284a3.be9898"
            ]
        ],
        "l": false
    },
    {
        "id": "ce3284a3.be9898",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "{{bridgeIpAddress}}",
                "fromt": "str",
                "to": "bridgeIpAddress",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 275,
        "y": 660,
        "wires": [
            [
                "fbb7a5ed.02e888"
            ]
        ],
        "l": false
    },
    {
        "id": "49056617.aaf598",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Create authorized user for Philips Hue Bridge",
        "info": "Authorized user are allowed to control all devices that have been defined in Philips Hue Android App.",
        "x": 210,
        "y": 560,
        "wires": []
    },
    {
        "id": "ef119ad0.5d6638",
        "type": "ui_button",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "New connection",
        "group": "e34a72a4.23d21",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "New connection",
        "tooltip": "Please press Philips Hue link button before pressing the \"New connection\" button.",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"devicetype\":\"my_hue_app#phone default_user\"}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 95,
        "y": 640,
        "wires": [
            [
                "aea284da.294718"
            ]
        ],
        "l": false
    },
    {
        "id": "233ba70b.3ad648",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 635,
        "y": 600,
        "wires": [],
        "l": false
    },
    {
        "id": "29b2edcc.07b922",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Username already created?",
        "property": "bridgeApiKey",
        "propertyType": "flow",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 515,
        "y": 620,
        "wires": [
            [
                "9c325116.9241b",
                "a57cb3ce.a472c"
            ],
            [
                "11beb601.2d6aba",
                "4f4fbd6b.6d9324"
            ]
        ],
        "l": false
    },
    {
        "id": "9db14f2e.d24ff",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 695,
        "y": 660,
        "wires": [],
        "l": false
    },
    {
        "id": "bad9780.5131d88",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "bridgeDevices",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 135,
        "y": 1420,
        "wires": [
            [
                "971fa92f.bbdf58",
                "da470f45.00609",
                "3400365d.6d6bca"
            ]
        ],
        "l": false
    },
    {
        "id": "704019cd.48d508",
        "type": "ui_text",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "group": "e34a72a4.23d21",
        "order": 7,
        "width": 14,
        "height": 1,
        "name": "Info",
        "label": "Information:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 550,
        "y": 840,
        "wires": []
    },
    {
        "id": "68b2ecfb.590c74",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "To be able to command your Philips devices, please connect your bridge.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 820,
        "wires": [
            [
                "704019cd.48d508"
            ]
        ],
        "l": false
    },
    {
        "id": "4e3dd355.ebe4fc",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Your Philips Hue bridge is connected and ready for use.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 395,
        "y": 860,
        "wires": [
            [
                "704019cd.48d508"
            ]
        ],
        "l": false
    },
    {
        "id": "7fa6e6b2.d3eda8",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 840,
        "wires": [
            [
                "b3bbd68c.7210f8"
            ]
        ]
    },
    {
        "id": "f13be781.505978",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "UI Dashboard",
        "info": "This user interface helps is used to set up the first connection between Philips Hue bridge and ARAGON.",
        "x": 110,
        "y": 520,
        "wires": []
    },
    {
        "id": "977eaa34.305a38",
        "type": "ui_template",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "group": "e34a72a4.23d21",
        "name": "Header",
        "order": 1,
        "width": 14,
        "height": 7,
        "format": "<div ng-bind-html=\"msg.payload\" \n    style= \"width: 100%;  \n        padding-top:10px; \n        padding-bottom:10px;\n        font-family: 'Trebuchet MS', Arial, Times, serif;\n    \">\n    \n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 280,
        "y": 1060,
        "wires": [
            [
                "de892613.5c86b8"
            ]
        ]
    },
    {
        "id": "406a604d.1dd39",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Paragraph",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "<h1>Philips Hue</h1>   <p>          This tab is used to set up the connection between your Philips Hue Bridge and your ARAGON.<br>          Please follow the next steps whether it is the first connection:<br>        <ol>         <li>Press the link button on the Philips Hue Bridge</li>         <li>Click on \"NEW CONNECTION\" button</li>         <li>Make sure the connection is established, see \"Information\".</li>     </ol>                <br>Once your Philips Hue bridge is connected, you may be able to command your Philips Devices by using your voice. A list of the available devices is displayed on the side.     <br><br><u>Notes:</u>      <ol>         <li>If the IP address of your Philips Hue bridge cannot be found, please enter it manually.</li>         <li>Click on \"SEARCH FOR PHILIPS HUE DEVICES & SCENES\" if no device or scene appears.</li>     </ol> </p>",
        "payloadType": "str",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "977eaa34.305a38"
            ]
        ]
    },
    {
        "id": "de892613.5c86b8",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 395,
        "y": 1060,
        "wires": [],
        "l": false
    },
    {
        "id": "dca7b284.accf8",
        "type": "ui_button",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Devices",
        "group": "2f247c5c.709394",
        "order": 1,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Search for Philips Hue devices & scenes",
        "tooltip": "Searchs for available devices and displays them in the list below",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "http://{{bridgeIpAddress}}/api/{{bridgeApiKey}}/lights",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 115,
        "y": 1200,
        "wires": [
            [
                "9bb14f34.e0efd"
            ]
        ],
        "l": false
    },
    {
        "id": "3e367278.f3991e",
        "type": "ui_text",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "group": "e34a72a4.23d21",
        "order": 2,
        "width": "5",
        "height": 1,
        "name": "Spacer",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 55,
        "y": 640,
        "wires": [],
        "l": false
    },
    {
        "id": "4c4e4d5e.73ab74",
        "type": "ui_dropdown",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Lights_list",
        "label": "Lights",
        "tooltip": "",
        "place": "Show list",
        "group": "2f247c5c.709394",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "65e1d62f.cdbe68"
            ]
        ]
    },
    {
        "id": "65e1d62f.cdbe68",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 705,
        "y": 1420,
        "wires": [],
        "l": false
    },
    {
        "id": "72c4b6b7.63ad58",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Your bridge is already connected!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 635,
        "y": 660,
        "wires": [
            [
                "9db14f2e.d24ff"
            ]
        ],
        "l": false
    },
    {
        "id": "9c325116.9241b",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please press the link button then click again on \"NEW CONNECTION\".",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 575,
        "y": 600,
        "wires": [
            [
                "233ba70b.3ad648"
            ]
        ],
        "l": false
    },
    {
        "id": "93c2e6fa.d52918",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.lights",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 1460,
        "wires": [],
        "l": false
    },
    {
        "id": "666bacd3.cfce14",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 335,
        "y": 860,
        "wires": [
            [
                "4e3dd355.ebe4fc"
            ]
        ],
        "l": false
    },
    {
        "id": "b3bbd68c.7210f8",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 255,
        "y": 840,
        "wires": [
            [
                "68b2ecfb.590c74"
            ],
            [
                "68b2ecfb.590c74"
            ],
            [
                "666bacd3.cfce14"
            ]
        ],
        "l": false
    },
    {
        "id": "cb91b63c.b7bb88",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Failed login",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please connect your bridge first.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 295,
        "y": 1180,
        "wires": [
            [
                "57cd6b7e.717304"
            ]
        ],
        "l": false
    },
    {
        "id": "da470f45.00609",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Update device list",
        "func": "let devices= flow.get(\"bridgeDevices\");\n\nvar lights_name= [];\nvar sensors_name= [];\nvar scenes_name= [];\nmsg.payload= {};\n\nfor(let id in devices){\n\n    switch(devices[id].type){\n        \n        //Get lights + room\n        case \"dimmers\":\n            lights_name.push(devices[id].object + \" - Room: \" + devices[id].zone);\n            break;\n        \n        //Get sensors + room\n        case \"sensor\":\n            sensors_name.push(devices[id].name + \" - Room: \" + devices[id].zone);\n            break;\n        \n        //Get scenes + room\n        case \"scenes\":\n            scenes_name.push(devices[id].object + \" - Room: \" + devices[id].zone);\n            break;\n            \n        default:\n            node.warn(\"Device not found!\");\n    }\n    \n}\n\nmsg.payload.lights = lights_name;\nmsg.payload.sensors = sensors_name;\nmsg.payload.scenes = scenes_name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 355,
        "y": 1420,
        "wires": [
            [
                "93c2e6fa.d52918",
                "cc3c4efa.ff582",
                "7ee608bf.76c2d8",
                "c06ee661.411ad8"
            ]
        ],
        "l": false
    },
    {
        "id": "3f2c0c5e.b64fe4",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Intructions for user",
        "info": "",
        "x": 130,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8f7236d4.a31ca8",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Connection status",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "7d4abf9a.ac6f7",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "SUCESSFUL LOG IN (STATUS)",
        "links": [
            "11beb601.2d6aba",
            "fe07a884.c65928"
        ],
        "x": 255,
        "y": 880,
        "wires": [
            [
                "666bacd3.cfce14"
            ]
        ]
    },
    {
        "id": "bf03ae9a.b7b9f",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "GET IP OUT",
        "links": [
            "53ccdc16.a6cd74",
            "c007d38b.173c8"
        ],
        "x": 215,
        "y": 600,
        "wires": []
    },
    {
        "id": "aea284da.294718",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "bridge IP?",
        "property": "bridgeIpAddress",
        "propertyType": "flow",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 155,
        "y": 640,
        "wires": [
            [
                "bf03ae9a.b7b9f"
            ],
            [
                "8c4e3e38.d70bd"
            ]
        ],
        "l": false
    },
    {
        "id": "11beb601.2d6aba",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "SUCCESSFUL NEW CONNECTION",
        "links": [
            "7d4abf9a.ac6f7"
        ],
        "x": 575,
        "y": 680,
        "wires": []
    },
    {
        "id": "35d40f16.5af07",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Logged in",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Search in progress, please wait.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 295,
        "y": 1220,
        "wires": [
            [
                "8d585752.d8a098"
            ]
        ],
        "l": false
    },
    {
        "id": "8d585752.d8a098",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "position": "top right",
        "displayTime": "4",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 355,
        "y": 1220,
        "wires": [],
        "l": false
    },
    {
        "id": "94381859.d400d8",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Devices found!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 355,
        "y": 1340,
        "wires": [
            [
                "95b7071a.18d1f8"
            ]
        ],
        "l": false
    },
    {
        "id": "95b7071a.18d1f8",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 415,
        "y": 1340,
        "wires": [],
        "l": false
    },
    {
        "id": "9bb14f34.e0efd",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 215,
        "y": 1200,
        "wires": [
            [
                "cb91b63c.b7bb88"
            ],
            [
                "35d40f16.5af07",
                "6ea07af1.2d4144"
            ]
        ],
        "l": false
    },
    {
        "id": "7298f0f9.cae6f",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "UI DEVICES OUT",
        "links": [
            "f08d4a54.0c77b8"
        ],
        "x": 355,
        "y": 1260,
        "wires": []
    },
    {
        "id": "57cd6b7e.717304",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 355,
        "y": 1180,
        "wires": [],
        "l": false
    },
    {
        "id": "93e0356d.d79868",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "UI UPDATE DEVICES LIST IN",
        "links": [
            "9ad75a1d.c6f558"
        ],
        "x": 55,
        "y": 1420,
        "wires": [
            [
                "bad9780.5131d88"
            ]
        ]
    },
    {
        "id": "ec2cee50.1777f",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "***********************Get Devices & Scenes (manually)***********************",
        "info": "",
        "x": 300,
        "y": 1140,
        "wires": []
    },
    {
        "id": "fac16f0a.20566",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Update UI",
        "info": "",
        "x": 100,
        "y": 1380,
        "wires": []
    },
    {
        "id": "6ea07af1.2d4144",
        "type": "delay",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 295,
        "y": 1260,
        "wires": [
            [
                "7298f0f9.cae6f"
            ]
        ],
        "l": false
    },
    {
        "id": "67351fe7.414b4",
        "type": "ui_dropdown",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Sensors_list",
        "label": "Sensors",
        "tooltip": "",
        "place": "Show list",
        "group": "2f247c5c.709394",
        "order": 4,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 610,
        "y": 1480,
        "wires": [
            [
                "d66cc3c0.1cd83"
            ]
        ]
    },
    {
        "id": "d66cc3c0.1cd83",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 715,
        "y": 1480,
        "wires": [],
        "l": false
    },
    {
        "id": "cc3c4efa.ff582",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload.sensors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 1480,
        "wires": [
            [
                "67351fe7.414b4"
            ]
        ],
        "l": false
    },
    {
        "id": "3400365d.6d6bca",
        "type": "delay",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 235,
        "y": 1360,
        "wires": [
            [
                "f5b05e03.45c1d"
            ]
        ],
        "l": false
    },
    {
        "id": "7658531d.5256fc",
        "type": "file",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "filename": "usernamePhilipsHue.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 635,
        "y": 560,
        "wires": [
            [
                "634c6561.6e8bac",
                "5e65c931.4c9368"
            ]
        ],
        "l": false
    },
    {
        "id": "a57cb3ce.a472c",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Save username (file & flow variable)",
        "func": "if(msg.payload[0].success.username !== undefined){\n    \n    let usernamePhilips = msg.payload[0].success.username;\n    \n    // flow variable\n    flow.set(\"bridgeApiKey\", usernamePhilips);\n    \n    // file\n    msg.payload = {\"username\": usernamePhilips};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 575,
        "y": 560,
        "wires": [
            [
                "7658531d.5256fc"
            ]
        ],
        "l": false
    },
    {
        "id": "634c6561.6e8bac",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 520,
        "wires": [],
        "l": false
    },
    {
        "id": "5e65c931.4c9368",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "BRIDGE CONNECTION OUT",
        "links": [
            "5965b260.56ca5c"
        ],
        "x": 695,
        "y": 560,
        "wires": []
    },
    {
        "id": "eb21efac.2599",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "status",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 395,
        "y": 660,
        "wires": [
            [
                "13ba90d8.7ccb5f"
            ],
            [
                "c0c1fc3e.5778f",
                "99c0650f.3ff478"
            ]
        ],
        "l": false
    },
    {
        "id": "34ec6104.1b4d9e",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 575,
        "y": 760,
        "wires": [],
        "l": false
    },
    {
        "id": "c0c1fc3e.5778f",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Error & delete IP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The IP address seems to be wrong, please try again.",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "bridgeIpAddress",
                "pt": "flow"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 515,
        "y": 760,
        "wires": [
            [
                "34ec6104.1b4d9e"
            ]
        ],
        "l": false
    },
    {
        "id": "f5b05e03.45c1d",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Device found?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 295,
        "y": 1360,
        "wires": [
            [
                "94381859.d400d8"
            ],
            [
                "aa7a393e.6c88c8"
            ]
        ],
        "l": false
    },
    {
        "id": "aa7a393e.6c88c8",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No device has been found!",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 355,
        "y": 1380,
        "wires": [
            [
                "a8aacbef.185b68"
            ]
        ],
        "l": false
    },
    {
        "id": "a8aacbef.185b68",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 415,
        "y": 1380,
        "wires": [],
        "l": false
    },
    {
        "id": "68b84cd5.68c634",
        "type": "http request",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "get Bridge IP",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/hue/bridges/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "4498e3af.00002c",
                "bf0c7d0b.2609e"
            ]
        ]
    },
    {
        "id": "9d4718bb.0eb808",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 515,
        "y": 200,
        "wires": [
            [
                "eb372443.929838"
            ]
        ],
        "l": false
    },
    {
        "id": "985120db.c3cbb",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Get Bridge IP address via Huemagic Node",
        "info": "Huemagic node has to be installed via \"Manage palette\" menu.",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "e061c17.124794",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "empty?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 435,
        "y": 140,
        "wires": [
            [
                "56cda581.ded71c"
            ],
            [
                "9d4718bb.0eb808"
            ]
        ],
        "l": false
    },
    {
        "id": "56cda581.ded71c",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "error",
        "func": "msg.cmd={};\nmsg.cmd.lang = global.get(\"msgLang\");\n    if (msg.cmd.lang === \"de\") {\n        text = \"Bitte geben Sie die IP-Adresse der PHILIPS HUE Bridge auf der Benutzeroberfläche ein\";\n        msg.error = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"de-DE\",\n            forceText: true\n        };\n    } else if (msg.cmd.lang === \"fr\") {\n        text = \"Veuillez indiquer l'adresse IP du pont PHILIPS HUE sur l'interface utilisateur\";\n        msg.error = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"fr-FR\",\n            forceText: true\n        };\n    } else {\n        text = \"Please indicate the IP address of PHILIPS HUE bridge in the user interface\";\n        msg.error = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"en-EN\",\n            forceText: true\n        };\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 120,
        "wires": [
            [
                "41b62c33.b9bd74"
            ]
        ]
    },
    {
        "id": "41b62c33.b9bd74",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 635,
        "y": 120,
        "wires": []
    },
    {
        "id": "cfdd2bb1.7d7628",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 755,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "f6f614f1.43b2c8",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Authorized user?",
        "info": "",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "649e66bc.05ec38",
        "type": "http request",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1235,
        "y": 120,
        "wires": [
            [
                "10f75439.ba954c",
                "8c190857.6a6948"
            ]
        ],
        "l": false
    },
    {
        "id": "34dfff4e.3aa85",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1395,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "88ba39b2.6e5698",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1375,
        "y": 140,
        "wires": [
            [
                "3323b49c.1e682c",
                "34dfff4e.3aa85"
            ]
        ],
        "l": false
    },
    {
        "id": "fe07a884.c65928",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "SUCCESSFUL LOG IN OUT",
        "links": [
            "6acb7db6.2431c4",
            "f08d4a54.0c77b8",
            "7d4abf9a.ac6f7"
        ],
        "x": 1515,
        "y": 200,
        "wires": []
    },
    {
        "id": "5965b260.56ca5c",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "BRIDGE CONNECTION IN",
        "links": [
            "5e65c931.4c9368",
            "6557189e.84d478"
        ],
        "x": 855,
        "y": 160,
        "wires": [
            [
                "cbd28795.a8cfd8"
            ]
        ]
    },
    {
        "id": "8c190857.6a6948",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "status",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1295,
        "y": 120,
        "wires": [
            [
                "6e7c1a09.6abab4"
            ],
            [
                "88ba39b2.6e5698"
            ]
        ],
        "l": false
    },
    {
        "id": "f84cdb6.e0b5728",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1435,
        "y": 100,
        "wires": [],
        "l": false
    },
    {
        "id": "10f75439.ba954c",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "statusCode",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1295,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "6e7c1a09.6abab4",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Sorry an error has occured, please try again.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1375,
        "y": 100,
        "wires": [
            [
                "f84cdb6.e0b5728"
            ]
        ],
        "l": false
    },
    {
        "id": "3323b49c.1e682c",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Authorized user?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1435,
        "y": 140,
        "wires": [
            [
                "51a1641a.ac26ec"
            ],
            [
                "fe07a884.c65928",
                "c403768c.2b12f8"
            ]
        ],
        "l": false
    },
    {
        "id": "51a1641a.ac26ec",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please connect your bridge with \"NEW CONNECTION\"..",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1515,
        "y": 100,
        "wires": [
            [
                "d055d965.de1b88"
            ]
        ],
        "l": false
    },
    {
        "id": "d055d965.de1b88",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Failed login",
        "x": 1575,
        "y": 100,
        "wires": [],
        "l": false
    },
    {
        "id": "c403768c.2b12f8",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Successful connection!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1515,
        "y": 160,
        "wires": [
            [
                "c16f05aa.b1d1a8"
            ]
        ],
        "l": false
    },
    {
        "id": "c16f05aa.b1d1a8",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Successful login",
        "x": 1575,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "c007d38b.173c8",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "GET IP IN",
        "links": [
            "bf03ae9a.b7b9f",
            "8c683cb3.2f7af",
            "e2900a6.70b9bf8"
        ],
        "x": 115,
        "y": 220,
        "wires": [
            [
                "68b84cd5.68c634",
                "784660e3.0657a"
            ]
        ]
    },
    {
        "id": "cbd28795.a8cfd8",
        "type": "file in",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "filename": "usernamePhilipsHue.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 935,
        "y": 140,
        "wires": [
            [
                "3f896629.f7e64a"
            ]
        ],
        "l": false
    },
    {
        "id": "e0c043d6.4963e",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Get username & IP address from file",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 855,
        "y": 120,
        "wires": [
            [
                "cbd28795.a8cfd8",
                "a9bc4bcf.277108"
            ]
        ],
        "l": false
    },
    {
        "id": "3f896629.f7e64a",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 995,
        "y": 140,
        "wires": [
            [
                "c6fb4ed5.657a9"
            ]
        ],
        "l": false
    },
    {
        "id": "f9c2564d.1c75d8",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Set IpAddress",
        "rules": [
            {
                "t": "set",
                "p": "bridgeIpAddress",
                "pt": "flow",
                "to": "payload.bridgeIpAddress",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1055,
        "y": 100,
        "wires": [
            [
                "e87e6a97.bc5c08"
            ]
        ],
        "l": false
    },
    {
        "id": "3572d8b.35a6b28",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "error msg",
        "func": "msg.cmd={};\nmsg.cmd.lang = global.get(\"msgLang\");\nvar ourIP = global.get(\"msgServerIP\");\nvar text = \"\";\nvar text2 = \"\";\n\n// No unsolicited spoken error messages 22-07\nvar d = new Date();\nvar hour = d.getHours();\nif (hour >= 22 || hour < 7 ) {\n    node.warn(\"Skipping spoken error messages during the night: \"+hour);\n    return;\n}\n\nif (msg.cmd.lang === \"de\") {\n    text = \"...\";\n    if(ourIP.length>0){\n        text2 = \" Die adresse ist \" + ourIP;\n    }\n    msg.error = {\n        text: text,\n        siteId: msg.cmd.siteId,\n        lang: \"de-DE\",\n        forceRestart: true\n    };\n} else if (msg.cmd.lang === \"fr\") {\n    text = \"Dans votre navigateur, allez sur l'interface utilisateur, section PHILIPS Gateway et suivez les instructions données.\";\n    if(ourIP.length>0){\n        text = \"Dans votre navigateur, allez sur: \"+ ourIP + \" deux points 1880 slash ui. Suivez les instructions données dans la section PHILIPS Gateway.\";\n        text2 = \" L'adresse est \" + ourIP;\n    }\n    msg.error = {\n        text: text,\n        siteId: msg.cmd.siteId,\n        lang: \"fr-FR\",\n        forceRestart: true\n    };\n} else {\n    text = \"In your browser, navigate to the user interface and follow the given instructions in the PHILIPS Gateway tab\";\n    if(ourIP.length>0){\n        text = \"In your browser, navigate to: \"+ ourIP + \" colon 1880 slash ui. Follow the given instructions in the PHILIPS Gateway tab\";\n        text2 = \" The address is \" + ourIP;\n    }\n    msg.error = {\n        text: text,\n        siteId: msg.cmd.siteId,\n        lang: \"en-EN\",\n        forceRestart: true\n    };\n}\nvar msg2;\nif(text2.length>0){\n    msg2 = JSON.parse(JSON.stringify(msg))\n    msg2.error.text = text2;\n    msg2.error.forceRestart= true;\n}\nreturn [msg,msg2];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 300,
        "wires": [
            [
                "bdc5e28e.e4022"
            ]
        ]
    },
    {
        "id": "bdc5e28e.e4022",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 1675,
        "y": 300,
        "wires": []
    },
    {
        "id": "882bae6d.ea506",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "status?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "EHOSTUNREACH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ECONNREFUSED",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1300,
        "y": 340,
        "wires": [
            [
                "3572d8b.35a6b28"
            ],
            [
                "3572d8b.35a6b28"
            ],
            [
                "3572d8b.35a6b28"
            ],
            [
                "c69a20bd.b352f"
            ]
        ]
    },
    {
        "id": "100d344c.b6b7bc",
        "type": "catch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "scope": [],
        "uncaught": false,
        "x": 1430,
        "y": 280,
        "wires": [
            [
                "3572d8b.35a6b28"
            ]
        ]
    },
    {
        "id": "c69a20bd.b352f",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "empty",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 360,
        "wires": [
            [
                "3572d8b.35a6b28"
            ],
            [
                "2905a18.eca625e"
            ]
        ]
    },
    {
        "id": "f717cc43.0a4fc",
        "type": "http request",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Philips Hue devices",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1110,
        "y": 340,
        "wires": [
            [
                "882bae6d.ea506"
            ]
        ]
    },
    {
        "id": "fe70099f.fd8b28",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "IP & Username",
        "rules": [
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "{{bridgeIpAddress}}",
                "fromt": "str",
                "to": "bridgeIpAddress",
                "tot": "flow"
            },
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "{{username}}",
                "fromt": "str",
                "to": "bridgeApiKey",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 975,
        "y": 340,
        "wires": [
            [
                "f717cc43.0a4fc"
            ]
        ],
        "l": false
    },
    {
        "id": "2905a18.eca625e",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Philips Hue JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1510,
        "y": 420,
        "wires": [
            [
                "ccc02263.8b157",
                "cb1609fd.c36af8"
            ]
        ]
    },
    {
        "id": "dbe3fe4e.2bc36",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "http://{{bridgeIpAddress}}/api/{{username}}/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 915,
        "y": 340,
        "wires": [
            [
                "fe70099f.fd8b28"
            ]
        ],
        "l": false
    },
    {
        "id": "f08d4a54.0c77b8",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "GET DEVICES IN",
        "links": [
            "9bf5bad8.eb0008",
            "58cad645.1441d8",
            "7298f0f9.cae6f",
            "fe07a884.c65928"
        ],
        "x": 855,
        "y": 340,
        "wires": [
            [
                "dbe3fe4e.2bc36"
            ]
        ]
    },
    {
        "id": "de6fc4e.02d4b38",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Get Philips Hue device list",
        "info": "",
        "x": 950,
        "y": 300,
        "wires": []
    },
    {
        "id": "ccc02263.8b157",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "AUTO DEVICE LIST OUT",
        "links": [
            "e067a9f.cab8a58"
        ],
        "x": 1675,
        "y": 420,
        "wires": []
    },
    {
        "id": "ed5cee59.0744b",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "IP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 75,
        "y": 160,
        "wires": [
            [
                "a840e52f.867678"
            ]
        ],
        "l": false
    },
    {
        "id": "7ee608bf.76c2d8",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload.lights",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 1420,
        "wires": [
            [
                "4c4e4d5e.73ab74"
            ]
        ],
        "l": false
    },
    {
        "id": "4498e3af.00002c",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "statusCode",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 375,
        "y": 120,
        "wires": [],
        "l": false
    },
    {
        "id": "bf0c7d0b.2609e",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Not found?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 375,
        "y": 160,
        "wires": [
            [
                "e061c17.124794"
            ],
            [
                "46369625.99ac88"
            ]
        ],
        "l": false
    },
    {
        "id": "76847b1a.aaac34",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Search for IP address",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "IP address not found!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 295,
        "y": 340,
        "wires": [
            [
                "500dc0ce.8589b"
            ]
        ],
        "l": false
    },
    {
        "id": "81964c90.bac66",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "position": "prompt",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Submit",
        "cancel": "New research",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 415,
        "y": 340,
        "wires": [
            [
                "f47ef26d.c3592"
            ]
        ],
        "l": false
    },
    {
        "id": "454e3b65.73a044",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Debug IP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "192.168.1.173",
        "payloadType": "str",
        "x": 615,
        "y": 340,
        "wires": [
            [
                "eb372443.929838"
            ]
        ],
        "l": false
    },
    {
        "id": "285698d.b872968",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Ip address?",
        "property": "bridgeIpAddress",
        "propertyType": "flow",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 115,
        "y": 340,
        "wires": [
            [
                "bc272725.880108"
            ]
        ],
        "l": false
    },
    {
        "id": "5bb4d439.a3958c",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "New research",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "New research",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 535,
        "y": 340,
        "wires": [
            [
                "3bf8533b.e7d2ac"
            ],
            [
                "e2900a6.70b9bf8"
            ]
        ],
        "l": false
    },
    {
        "id": "53ccdc16.a6cd74",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "GET IP UI IN",
        "links": [
            "bf03ae9a.b7b9f"
        ],
        "x": 55,
        "y": 400,
        "wires": [
            [
                "78fc7ee1.8fe94"
            ]
        ]
    },
    {
        "id": "78fc7ee1.8fe94",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "login==false?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 115,
        "y": 400,
        "wires": [
            [
                "cb011bc0.985848"
            ]
        ],
        "l": false
    },
    {
        "id": "cb011bc0.985848",
        "type": "delay",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "pauseType": "delay",
        "timeout": "12",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 175,
        "y": 400,
        "wires": [
            [
                "bc272725.880108"
            ]
        ],
        "l": false
    },
    {
        "id": "f4d6ba8e.623608",
        "type": "delay",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 235,
        "y": 340,
        "wires": [
            [
                "76847b1a.aaac34"
            ]
        ],
        "l": false
    },
    {
        "id": "a840e52f.867678",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Login initially false",
        "rules": [
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 135,
        "y": 160,
        "wires": [
            [
                "68b84cd5.68c634",
                "784660e3.0657a"
            ]
        ],
        "l": false
    },
    {
        "id": "e2900a6.70b9bf8",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "GET IP OUT",
        "links": [
            "c007d38b.173c8"
        ],
        "x": 595,
        "y": 380,
        "wires": []
    },
    {
        "id": "3bf8533b.e7d2ac",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "login==false?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 595,
        "y": 300,
        "wires": [
            [
                "eb372443.929838"
            ]
        ],
        "l": false
    },
    {
        "id": "cb1609fd.c36af8",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1675,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "c06ee661.411ad8",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload.scenes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 1540,
        "wires": [
            [
                "4ad7b684.13e168"
            ]
        ],
        "l": false
    },
    {
        "id": "4ad7b684.13e168",
        "type": "ui_dropdown",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Scenes_list",
        "label": "Scenes",
        "tooltip": "",
        "place": "Show list",
        "group": "2f247c5c.709394",
        "order": 3,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "x": 610,
        "y": 1540,
        "wires": [
            [
                "805e1016.4dad6"
            ]
        ]
    },
    {
        "id": "805e1016.4dad6",
        "type": "debug",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 715,
        "y": 1540,
        "wires": [],
        "l": false
    },
    {
        "id": "eb372443.929838",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Save ip address (file & flow variable)",
        "func": "// Ip address found by Huemagic node\nif(msg.payload[0].ip !== undefined){\n    \n    let bridgeIpAddress = msg.payload[0].ip;\n    \n    // flow variable\n    flow.set(\"bridgeIpAddress\", bridgeIpAddress);\n    \n    // file\n    msg.payload = {\"bridgeIpAddress\": bridgeIpAddress};\n}\n// Ip address not found by Huemagic node\nelse{\n    let bridgeIpAddress = msg.payload;\n    \n    // flow variable\n    flow.set(\"bridgeIpAddress\", bridgeIpAddress);\n    \n    // file\n    msg.payload = {\"bridgeIpAddress\": bridgeIpAddress};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 635,
        "y": 200,
        "wires": [
            [
                "d8a73167.c3ba4"
            ]
        ],
        "l": false
    },
    {
        "id": "d8a73167.c3ba4",
        "type": "file",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "filename": "bridgeIpAddressPH.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 695,
        "y": 200,
        "wires": [
            [
                "cfdd2bb1.7d7628",
                "2724ea1e.044196"
            ]
        ],
        "l": false
    },
    {
        "id": "9673cb4c.311b58",
        "type": "comment",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Ask for Bridge IP address (UI)",
        "info": "",
        "x": 340,
        "y": 300,
        "wires": []
    },
    {
        "id": "a9bc4bcf.277108",
        "type": "file in",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "filename": "bridgeIpAddressPH.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 935,
        "y": 100,
        "wires": [
            [
                "af839520.e89138"
            ]
        ],
        "l": false
    },
    {
        "id": "af839520.e89138",
        "type": "json",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 995,
        "y": 100,
        "wires": [
            [
                "f9c2564d.1c75d8"
            ]
        ],
        "l": false
    },
    {
        "id": "9358852b.3b5958",
        "type": "function",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Set url",
        "func": "// Bridge info\nlet username = flow.get(\"bridgeApiKey\");\nlet bridgeIpAddress = flow.get(\"bridgeIpAddress\");\n\nif(bridgeIpAddress !== undefined && username !== undefined){\n    msg.url = \"http://\"+bridgeIpAddress+\"/api/\"+username;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1175,
        "y": 120,
        "wires": [
            [
                "649e66bc.05ec38"
            ]
        ],
        "l": false
    },
    {
        "id": "63535cbf.ad5294",
        "type": "inject",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Login?",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "6557189e.84d478"
            ]
        ]
    },
    {
        "id": "6557189e.84d478",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "BRIDGE CONNECTION OUT",
        "links": [
            "5965b260.56ca5c"
        ],
        "x": 255,
        "y": 940,
        "wires": []
    },
    {
        "id": "c6fb4ed5.657a9",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Set username",
        "rules": [
            {
                "t": "set",
                "p": "bridgeApiKey",
                "pt": "flow",
                "to": "payload.username",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1055,
        "y": 140,
        "wires": [
            [
                "e87e6a97.bc5c08"
            ]
        ],
        "l": false
    },
    {
        "id": "e87e6a97.bc5c08",
        "type": "delay",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1115,
        "y": 120,
        "wires": [
            [
                "9358852b.3b5958"
            ]
        ],
        "l": false
    },
    {
        "id": "bc272725.880108",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 175,
        "y": 340,
        "wires": [
            [
                "f4d6ba8e.623608"
            ],
            [
                "f4d6ba8e.623608"
            ]
        ],
        "l": false
    },
    {
        "id": "46369625.99ac88",
        "type": "trigger",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "pay",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 55,
        "y": 340,
        "wires": [
            [
                "285698d.b872968"
            ]
        ],
        "l": false
    },
    {
        "id": "4f4fbd6b.6d9324",
        "type": "switch",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 575,
        "y": 640,
        "wires": [
            [
                "5e65c931.4c9368"
            ],
            [
                "72c4b6b7.63ad58"
            ]
        ],
        "l": false
    },
    {
        "id": "784660e3.0657a",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Searching for your Philips Hue bridge IP address, please wait.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 195,
        "y": 200,
        "wires": [
            [
                "4ea170f4.02cc5"
            ]
        ],
        "l": false
    },
    {
        "id": "4ea170f4.02cc5",
        "type": "ui_toast",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 255,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "500dc0ce.8589b",
        "type": "template",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div ng-bind-html=\"msg.payload\" \n    style=\"font-family: 'Trebuchet MS', Arial, Times, serif;\"\n    >\n   <p>Cannot find the IP address of your Philips bridge, please enter the IP address manually then submit it. <br>You can click on \"NEW RESEARCH\" to try finding the IP address automatically.<p> \n</div>",
        "output": "str",
        "x": 355,
        "y": 340,
        "wires": [
            [
                "81964c90.bac66"
            ]
        ],
        "l": false
    },
    {
        "id": "99c0650f.3ff478",
        "type": "file",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "Delete IP address file",
        "filename": "bridgeIpAddressPH.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 515,
        "y": 720,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "8c125c8c.3328b",
        "type": "link in",
        "z": "29001ccc.fe8c44",
        "g": "e4e45703.630a48",
        "name": "CREATE NEW USER IN",
        "links": [
            "2724ea1e.044196"
        ],
        "x": 195,
        "y": 720,
        "wires": [
            [
                "8c4e3e38.d70bd"
            ]
        ]
    },
    {
        "id": "2724ea1e.044196",
        "type": "link out",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "CREATE NEW USER OUT",
        "links": [
            "8c125c8c.3328b"
        ],
        "x": 755,
        "y": 240,
        "wires": []
    },
    {
        "id": "f47ef26d.c3592",
        "type": "change",
        "z": "29001ccc.fe8c44",
        "g": "ebb798d5.9a8828",
        "name": "Reset notification title",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 475,
        "y": 340,
        "wires": [
            [
                "5bb4d439.a3958c"
            ]
        ],
        "l": false
    },
    {
        "id": "f96ab142.d8bab8",
        "type": "mqtt-broker",
        "z": "f2d60e1d.4bd3",
        "name": "-",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "info": "-"
    },
    {
        "id": "e34a72a4.23d21",
        "type": "ui_group",
        "name": "Main",
        "tab": "234d05df.238d2a",
        "order": 1,
        "disp": false,
        "width": 14,
        "collapse": false
    },
    {
        "id": "2f247c5c.709394",
        "type": "ui_group",
        "name": "Hue_devices",
        "tab": "234d05df.238d2a",
        "order": 5,
        "disp": false,
        "width": 7,
        "collapse": false
    },
    {
        "id": "234d05df.238d2a",
        "type": "ui_tab",
        "name": "PHILIPS HUE",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]