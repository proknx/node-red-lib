[
    {
        "id": "7d53bde.1a645c4",
        "type": "tab",
        "label": "Custom Device - Philips Hue",
        "disabled": false,
        "info": ""
    },
    {
        "id": "25715a84.05775e",
        "type": "group",
        "z": "7d53bde.1a645c4",
        "name": "PHILIPS CUSTOM DEVICES",
        "style": {
            "label": true,
            "stroke": "#9363b7",
            "color": "#9363b7"
        },
        "nodes": [
            "1f335362.e9257d",
            "7eb95aaa.6dba74",
            "b4467726.63b568",
            "7efe6e6b.285b3",
            "365a79da.de1db6",
            "12849e4f.909eea",
            "c69aaa5b.15f8d",
            "f8635843.e1e43",
            "4430e5.d0cb7f1c",
            "ebea1fbc.3254f",
            "4c16ee1d.310468",
            "7d681a96.a346d4",
            "22671f9a.f68b9",
            "11089430.a672d4",
            "30f4001.247cc",
            "d8e5b152.76a5d8",
            "d62bb2bc.099e48",
            "85a13f96.18bd98",
            "9083f92b.24a25",
            "5cdfb22d.a1ebfc",
            "5e73eadc.eb4274",
            "42faadb0.713724",
            "b29b657d.ec1ff",
            "98be9591.1f4bf8",
            "23ef38cb.e75da",
            "d113b0ae.ce8e2",
            "527c6575.c348bc",
            "d5e299ef.d66b6",
            "f7e92348.be03",
            "97d173e4.5285f",
            "8708158.c0ca3e8",
            "850cae64.8a0408",
            "cf312ef5.2f4df",
            "7a55485f.dcc59",
            "43fda4f8.d02b3c",
            "1f1b1f9a.05a43",
            "5833a09d.97daf",
            "72620b5c.7368f4",
            "faf2b870.5abfb",
            "cb6ad983.5d0d2",
            "c8ce08c.e9e2d78",
            "85e806dc.9236a8",
            "3c32f142.95428e",
            "4316f2cd.86c3cc",
            "672dcd9b.b46b9c",
            "ff17d3c2.1fa47",
            "ccf65620.e26fb8",
            "8a9685d8.e367f8"
        ],
        "x": 814,
        "y": 479,
        "w": 742,
        "h": 682
    },
    {
        "id": "2addc59d.da626a",
        "type": "group",
        "z": "7d53bde.1a645c4",
        "name": "UI Dashboard",
        "style": {
            "label": true,
            "stroke": "#3f93cf",
            "color": "#3f93cf"
        },
        "nodes": [
            "6c965645.ca7318",
            "b0dde4e7.08e92",
            "60dbc035.28ec4",
            "3a6babce.4633bc",
            "c59bea3a.183cc",
            "1183db3d.b5b3c5",
            "65fc0b4c.6d5c6c",
            "b5b06634.d6a27",
            "9c663cfc.cc0e7",
            "180d275.6673dd9",
            "e25c9e2c.53bb8",
            "1d516a3a.716b56",
            "64df1bec.7e813c",
            "6379e7c0.8ce3b",
            "86293f1.2b085c",
            "c81af2ef.2ffe8",
            "b9399fe9.3d727",
            "699e8797.5daf48",
            "a9fe7943.5c4ec",
            "d2790902.f1e5a8",
            "ca1dcace.6400a",
            "77a4d85e.bdba5",
            "1387df5d.be85f1",
            "8abdf964.f6f59",
            "e2ba9bf2.90454",
            "699b738.a8d7d8c",
            "1aaec6ab.6cf279",
            "b0aca39f.3bd26",
            "e2fca6d9.ce46",
            "e799d037.2a7e6",
            "530f0f84.a282c",
            "90880671.1f9c8",
            "7f5e8353.b50664",
            "b8b8f4de.ca0cb8",
            "c74db45.17968c8",
            "c2b5c34c.101d78",
            "94f3dffa.02c6a8",
            "fc42d0bf.d007a8",
            "6a6cba77.197d44",
            "c898c6a.9a48738",
            "5af2a5ae.04d0b4",
            "62c5ccf1.8925c4",
            "bb756f68.5f42c8",
            "cdd495d8.15cae8",
            "6014d20e.8b417c",
            "64bbcbc2.b3356c",
            "fa4418af.714f08",
            "b54ff977.3d4958",
            "d01ae85e.72d318",
            "574b3102.553c6",
            "1487738c.ca7cfc",
            "313dd1e7.6586de",
            "d5a4589b.b210d8",
            "7664029e.5b629c",
            "52e583c8.4fae2c",
            "acf5fed5.d85b7",
            "3d376ff1.e0f108",
            "fcd5defb.fd20a8",
            "b69e033b.70df8",
            "3f1400bb.9c51e",
            "ec2c1055.2bbcf",
            "4669897d.3be5d",
            "45557099.59e7f8",
            "765590ed.61608",
            "728ecc2.5114834",
            "977cab2.605c8d8",
            "f5b98d9c.21304",
            "f84db62e.21f9b8",
            "e505b5d7.556a8",
            "38fa18d5.ab71e8",
            "d038e1be.fe8b5"
        ],
        "x": 14,
        "y": 479,
        "w": 762,
        "h": 1102
    },
    {
        "id": "489facd2.bdc3dc",
        "type": "group",
        "z": "7d53bde.1a645c4",
        "name": "Authentification",
        "style": {
            "label": true,
            "stroke": "#3f93cf",
            "color": "#3f93cf"
        },
        "nodes": [
            "3550eee.fb8c192",
            "77d13800.12f378",
            "ec810ff1.dcd948",
            "759ecff0.9431d8",
            "7024b55f.c79df4",
            "e314a576.72637",
            "23670bde.89242c",
            "7bdce417.edae3c",
            "696003a4.f9ea14",
            "107b52b9.2e3ea5",
            "b5a2cf95.37b08",
            "cb10032d.16796",
            "62759ad1.5ac124",
            "fdc350b4.a52bc",
            "33dc59af.80968e",
            "6fe489a3.632278",
            "851dec95.3f8418",
            "377b469e.7cac52",
            "e7ca5bff.147c1",
            "80e1114c.7bd108",
            "980e4d7f.d30598",
            "44e00380.81abfc",
            "67df965c.8ddf88",
            "6246b834.cf9178",
            "aa9e5d03.ca803",
            "6424de4b.816198",
            "dad095bf.c61918",
            "3e17c612.61572a",
            "b71af0ab.534aa8",
            "c646d486.fff028",
            "a0b2b2e2.824a4",
            "2af73916.8b1e26",
            "87d6cbae.e00dd",
            "ee518937.bf5918",
            "492786b2.6d4618",
            "3c39b2e0.6dad0e",
            "eae08d34.2d70b",
            "90a0d5d.3f50928",
            "ae5e431a.80fa48",
            "64510ac9.1a9484",
            "35735c1.7978ea4",
            "8b095d36.774c88",
            "a98977c7.ef93b8",
            "35f6b3c5.c51bec",
            "c1be106f.0537e8",
            "a7afeb6c.927cc",
            "9ff63c97.019008",
            "41080d37.accf7c",
            "d347de67.782df",
            "2ff79ae2.ee1eb6",
            "a694c23e.7e6ed",
            "c72f0a62.f3eb08",
            "7ef3cb53.e9e574",
            "82c79764.355558",
            "5040563b.e4e4",
            "a0b37854.67b8a",
            "fe9a5bd6.933b58",
            "328854ee.8db714",
            "20f7ed46.03e2aa",
            "7702bd78.2116a4",
            "baa48c70.37b5f8",
            "d762ae7e.2dded8",
            "4fb7da56.f3993c",
            "b476f12a.d70458",
            "8cfe403.61bcd4",
            "d92c28c8.c9f3c8",
            "fe5b0311.9c8418",
            "c0859a6e.cc8b",
            "e1d31b8.dd81de8",
            "5d66352a.0b904c",
            "e6316ee2.08de",
            "d5c74c02.c4ab7"
        ],
        "x": 14,
        "y": 19,
        "w": 1722,
        "h": 442
    },
    {
        "id": "cb6ad983.5d0d2",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Save",
        "rules": [
            {
                "t": "set",
                "p": "customDeviceList",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "faf2b870.5abfb",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Define manually custom devices",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "[{\"custom\":true,\"name\":\"Office Ceiling\",\"zone\":\"Office\",\"object\":\"Ceiling\",\"type\":\"lights\",\"setOn\":{\"name\":\"On\",\"url\":\"http://<IP_address_Philips_Hue_Bridge>/api/<username>/lights/<Light ID>/state\",\"body\":{\"on\":true}},\"setOff\":{\"name\":\"Off\",\"url\":\"http://<IP_address_Philips_Hue_Bridge>/api/<username>/lights/<Light ID>/state\",\"body\":{\"on\":false}},\"currentState\":{\"name\":\"CurrentState\",\"url\":\"http://<IP_address_Philips_Hue_Bridge>/api/<username>/lights/<Light ID>\",\"parser\":\"philips\",\"id\":0}}]",
        "payloadType": "json",
        "x": 990,
        "y": 600,
        "wires": [
            [
                "cb6ad983.5d0d2",
                "3c32f142.95428e"
            ]
        ]
    },
    {
        "id": "72620b5c.7368f4",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "↓ Custom devices - define your Philips devices here ↓",
        "info": "Template for manual custom device definition (here for lights): see inject node below",
        "x": 1040,
        "y": 560,
        "wires": []
    },
    {
        "id": "1f335362.e9257d",
        "type": "mqtt in",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "topic": "proknx/custom/cmd",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 930,
        "y": 1120,
        "wires": [
            [
                "7eb95aaa.6dba74"
            ]
        ]
    },
    {
        "id": "7eb95aaa.6dba74",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 905,
        "y": 1040,
        "wires": [
            [
                "f8635843.e1e43"
            ]
        ],
        "l": false
    },
    {
        "id": "b4467726.63b568",
        "type": "http request",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1395,
        "y": 1075,
        "wires": [
            [
                "7efe6e6b.285b3"
            ]
        ]
    },
    {
        "id": "7efe6e6b.285b3",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1495,
        "y": 1060,
        "wires": [],
        "l": false
    },
    {
        "id": "365a79da.de1db6",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Prepare request",
        "func": "msg.device=[];\nif (msg.cmd.type === \"lights\") {\n    if (msg.cmd.value !== undefined) {\n        for (var i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].type === \"dimmers\" && msg.cmd.cmd !== \"off\") {\n               var val = msg.cmd.value/100 * msg.items[i].setBrightness.valueMax;\n               msg.device[i] = msg.items[i].setBrightness;\n               \n               //-------- Modified code ---------//\n               if(msg.items[i].currentState.parser === \"philips\"){\n                   msg.device[i].body.bri = Math.floor(val);\n               }\n               else{\n                   msg.device[i].value = val;\n               }\n               //-------------------------------//\n               \n            }else if (msg.cmd.value > 0) {\n                msg.device[i] = msg.items[i].setOn;\n            }else {\n                msg.device[i] = msg.items[i].setOff;\n            }\n        }\n    }else if (msg.cmd.cmd === \"on\") {\n        for (var i = 0; i < msg.items.length; i++) {\n            msg.device[i] = msg.items[i].setOn;\t                      \n        }\n    }else if (msg.cmd.cmd === \"off\") {\n        for (var i = 0; i < msg.items.length; i++) {\n            msg.device[i] = msg.items[i].setOff;\n        }\n    }\n}else if (msg.cmd.type === \"aux\") {\n    if (msg.cmd.cmd === \"on\" || msg.cmd.cmd === \"set\") {\n        if (msg.cmd.value !== undefined) {\n          for (var i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].setBrightness !== undefined) {\n                var val = msg.cmd.value;\n                val = precisionRound(val, 1);\n                msg.device[i] = msg.items[i].setBrightness;\n                msg.device[i].value = val;\n            } \n            else if (msg.cmd.value > 0) {\n               msg.device[i] = msg.items[i].setOn;\n            }\n            else {\n               msg.device[i] = msg.items[i].setOff;\n            }\t\t\t\t         \n        }\n        }else {\n            for (var i = 0; i < msg.items.length; i++) {\n                msg.device[i] = msg.items[i].setOn;\n            }\n        }\n    }else if (msg.cmd.cmd === \"off\") {\n        for (var i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].setOff !== undefined) {\n                msg.device[i] = msg.items[i].setOff;\n            }\n        }\n    }\n}\n//-------- Added code --------//\nelse if (msg.cmd.type === \"scenes\") {\n    if (msg.cmd.cmd === \"on\"){\n        for (let i = 0; i < msg.items.length; i++) {\n            if (msg.items[i].setOn !== undefined) {\n                msg.device[i] = msg.items[i].setOn;\n            }\n        }\n    }\n}\n//----------------------------//\n \nflow.set(\"msgDevice\",msg.device) ; //contain command info of the device\nflow.set(\"msgItems\",msg.items); // contain list of devices concerned\nflow.set(\"msgCmd\", msg.cmd);\nmsg.payload = msg.device;\n  \nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1135,
        "y": 1080,
        "wires": [
            [
                "c69aaa5b.15f8d"
            ]
        ],
        "l": false
    },
    {
        "id": "12849e4f.909eea",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Cmd ?",
        "property": "cmd.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "increase",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "decrease",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "on",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "off",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "set",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1030,
        "y": 1040,
        "wires": [
            [
                "22671f9a.f68b9"
            ],
            [
                "22671f9a.f68b9"
            ],
            [
                "365a79da.de1db6"
            ],
            [
                "365a79da.de1db6"
            ],
            [
                "365a79da.de1db6"
            ]
        ]
    },
    {
        "id": "c69aaa5b.15f8d",
        "type": "split",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1195,
        "y": 1100,
        "wires": [
            [
                "7a55485f.dcc59"
            ]
        ],
        "l": false
    },
    {
        "id": "f8635843.e1e43",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "move data from payload",
        "rules": [
            {
                "t": "set",
                "p": "cmd",
                "pt": "msg",
                "to": "payload.cmd",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "items",
                "pt": "msg",
                "to": "payload.items",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 955,
        "y": 1040,
        "wires": [
            [
                "12849e4f.909eea"
            ]
        ],
        "l": false
    },
    {
        "id": "4430e5.d0cb7f1c",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Replace value and set url",
        "rules": [
            {
                "t": "change",
                "p": "payload.url",
                "pt": "msg",
                "from": "{value}",
                "fromt": "str",
                "to": "payload.value",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload.url",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 1075,
        "wires": [
            [
                "b4467726.63b568"
            ]
        ],
        "l": false
    },
    {
        "id": "ebea1fbc.3254f",
        "type": "mqtt in",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "topic": "proknx/custom/query",
        "qos": "2",
        "datatype": "auto",
        "broker": "f96ab142.d8bab8",
        "x": 930,
        "y": 950,
        "wires": [
            [
                "4c16ee1d.310468"
            ]
        ]
    },
    {
        "id": "4c16ee1d.310468",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1075,
        "y": 950,
        "wires": [
            [
                "7d681a96.a346d4"
            ]
        ],
        "l": false
    },
    {
        "id": "7d681a96.a346d4",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "move data from payload",
        "rules": [
            {
                "t": "set",
                "p": "cmd",
                "pt": "msg",
                "to": "payload.cmd",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "items",
                "pt": "msg",
                "to": "payload.items",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1125,
        "y": 950,
        "wires": [
            [
                "11089430.a672d4"
            ]
        ],
        "l": false
    },
    {
        "id": "22671f9a.f68b9",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "GET Current",
        "func": "msg.device = [];\n\nif (msg.cmd.type === \"aux\" || msg.cmd.type === \"lights\" || msg.cmd.type === \"dimmers\" ) {\n    var cptok=0;\n    var cpter=0;\n    msg.itemsok=[];\n    msg.itemser=[];\n    for (var i = 0; i < msg.items.length; i++) {\n        if(msg.items[i].currentState !== undefined && msg.items[i].type !== \"lights\") {\n            msg.itemsok[cptok]=msg.items[i];\n            cptok++;\n        } else {\n            msg.itemser[cpter]=msg.items[i];\n            cpter++;\n        }\n    }\n    if (msg.itemsok[0] !== undefined) {\n        msg.items = msg.itemsok;\n        for (var i = 0; i < msg.itemsok.length; i++) {\n\t\t\tmsg.device[i] = msg.itemsok[i].currentState;\n        }\n        msg.payload = msg.device;\n        delete msg.device;\n        flow.set(\"msgDevice\", msg.device);\n        flow.set(\"msgItems\", msg.items);\n        flow.set(\"msgCmd\", msg.cmd);\n        return [msg, null];\n    }\n\n    if (msg.itemser.length > 0 && msg.itemsok.length === 0) {\n        if (msg.itemser.length > 1) {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" und \";\n                text3 = msg.itemser.length-1;\n                text4 = \" andere Geräte verstehen diesen Befehl nicht\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" et \";\n                text3 = msg.itemser.length-1;\n                text4 = \" autres appareils ne supportent pas cette commande\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" and \";\n                text3 = msg.itemser.length-1;\n                text4 = \" other devices do not support this command\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        } else {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" versteht diesen Befehl nicht\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" ne supporte pas cette commande\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" does not support this command\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        }\n    }\n    flow.set(\"msgError\", msg.error);\n    flow.set(\"msgCmd\", msg.cmd);\n    return [null, msg];\n}",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1135,
        "y": 1020,
        "wires": [
            [
                "97d173e4.5285f"
            ],
            [
                "30f4001.247cc"
            ]
        ],
        "l": false
    },
    {
        "id": "11089430.a672d4",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "GET_Current",
        "func": "\nmsg.device = [];\ndeviceList = msg.deviceList;\n\nif ( msg.cmd.type === \"aux\" || msg.cmd.type === \"lights\" || msg.cmd.type === \"dimmers\" || msg.cmd.type === \"sensor\") {\n    var cptok=0;\n    var cpter=0;\n    msg.itemsok=[];\n    msg.itemser=[];\n    for (var i = 0; i < msg.items.length; i++) {\n        if(msg.items[i].currentState !== undefined) {\n            msg.itemsok[cptok]=msg.items[i];\n            cptok++;\n        } else {\n            msg.itemser[cpter]=msg.items[i];\n            cpter++;\n        }\n    }\n    if (msg.itemsok[0] !== undefined) {\n        msg.items = msg.itemsok;\n        for (var i = 0; i < msg.itemsok.length; i++) {\n\t\t    msg.device[i] = msg.itemsok[i].currentState;   \n        }\n        msg.payload = msg.device;\n \t    flow.set(\"msgDevice\", msg.device);\n        flow.set(\"msgItems\", msg.items);\n        flow.set(\"msgCmd\", msg.cmd);\n\t    delete msg.device;\n        return [msg, null];\n    }\n\n    if (msg.itemser.length > 0 && msg.itemsok.length === 0) {\n        if (msg.itemser.length > 1) {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" und \";\n                text3 = msg.itemser.length-1;\n                text4 = \" andere GerÃ¤te verstehen diesen Befehl nicht\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" et \";\n                text3 = msg.itemser.length-1;\n                text4 = \" autres appareils ne supportent pas cette commande\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" and \";\n                text3 = msg.itemser.length-1;\n                text4 = \" other devices do not support this command\";\n                texttabl = [text1, text2, text3, text4];\n                var text = \"\".concat(...texttabl);            \n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        } else {\n            if (msg.cmd.lang === \"de\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" versteht diesen Befehl nicht\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"de-DE\"\n                };\n            } else if (msg.cmd.lang === \"fr\") {\n                text1 = msg.itemser[0].name;\n                text2 = \" ne supporte pas cette commande\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"fr-FR\"\n                };\n            } else {\n                text1 = msg.itemser[0].name;\n                text2 = \" does not support this command\";\n                texttabl = [text1, text2];\n                var text = \"\".concat(...texttabl);\n                msg.error = {\n                    text: text,\n                    siteId: msg.cmd.siteId,\n                    lang: \"en-EN\"\n                };\n            }\n        }\n    }\n    flow.set(\"msgError\", msg.error);\n    flow.set(\"msgCmd\", msg.cmd);\n\n    return [null, msg];\n}",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1175,
        "y": 950,
        "wires": [
            [
                "d62bb2bc.099e48"
            ],
            [
                "d8e5b152.76a5d8"
            ]
        ],
        "l": false
    },
    {
        "id": "30f4001.247cc",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "ERROR TO FEEDBACK",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 1185,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d8e5b152.76a5d8",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "ERROR TO FEEDBACK",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 1255,
        "y": 970,
        "wires": []
    },
    {
        "id": "d62bb2bc.099e48",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Query",
        "func": "msg.device = msg.payload;\nmsg.payload.device = [];\nfor(var i = 0; i < msg.device.length ; i++){\n    msg.payload.device[i] = msg.device[i];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 905,
        "y": 900,
        "wires": [
            [
                "85a13f96.18bd98"
            ]
        ],
        "l": false
    },
    {
        "id": "85a13f96.18bd98",
        "type": "split",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "split",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 955,
        "y": 900,
        "wires": [
            [
                "8a9685d8.e367f8"
            ]
        ],
        "l": false
    },
    {
        "id": "9083f92b.24a25",
        "type": "http request",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1130,
        "y": 900,
        "wires": [
            [
                "b29b657d.ec1ff"
            ]
        ]
    },
    {
        "id": "5cdfb22d.a1ebfc",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Replace value and set url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload.url",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1035,
        "y": 900,
        "wires": [
            [
                "9083f92b.24a25"
            ]
        ],
        "l": false
    },
    {
        "id": "5e73eadc.eb4274",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Parser Philips",
        "func": "msg.states = [];\nif(msg.payload.length >= 1){\n   for(var i=0; i < msg.payload.length ; ++i){\n        \n        if(msg.payload.state.on && msg.payload.state.bri !== undefined){\n            // Light (dimmer) is on\n            msg.states[i]={\n                \"Data\" : [{\n                    \"Value\" : msg.payload.state.bri\n                }]\n            };\n        }\n        else{\n            // Light is off\n            msg.states[i]={\n                \"Data\" : [{\n                    \"Value\" : msg.payload.state.on\n                }]\n            };\n        }\n        if(msg.states[i].Data[0].Value !== undefined){\n            msg.states[i].Result=true;\n        }else{\n            msg.states[i].Result=false;\n        }\n    } \n}\nelse{\n    if(msg.payload.state.on && msg.payload.state.bri !== undefined){\n        // Light (dimmer) is on\n        msg.states[0]={\n            \"Data\" : [{\n                \"Value\" : msg.payload.state.bri\n            }]\n        };\n    }\n    else{\n        // Light is off\n        msg.states[0]={\n            \"Data\" : [{\n                \"Value\" : msg.payload.state.on\n            }]\n        };\n    }\n    \n    if(msg.states[0].Data[0].Value !== undefined){\n        msg.states[0].Result=true;\n    }else{\n        msg.states[0].Result=false;\n    }\n}\n\n \nmsg.payload=msg.states;\ndelete msg.states;\nif(msg.cmd.cmd !== undefined){\n    msg.command = true;\n}else{\n    msg.command = false;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 940,
        "y": 830,
        "wires": [
            [
                "98be9591.1f4bf8"
            ]
        ]
    },
    {
        "id": "42faadb0.713724",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1325,
        "y": 930,
        "wires": [],
        "l": false
    },
    {
        "id": "b29b657d.ec1ff",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1235,
        "y": 900,
        "wires": [
            [
                "527c6575.c348bc"
            ],
            [
                "42faadb0.713724"
            ]
        ],
        "l": false
    },
    {
        "id": "98be9591.1f4bf8",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "command or query?",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1065,
        "y": 830,
        "wires": [
            [
                "23ef38cb.e75da"
            ],
            [
                "d113b0ae.ce8e2"
            ]
        ],
        "outputLabels": [
            "if query",
            "if command"
        ],
        "l": false
    },
    {
        "id": "23ef38cb.e75da",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "FEEDBACK",
        "links": [
            "a1b4e119.a687c8"
        ],
        "x": 1115,
        "y": 800,
        "wires": []
    },
    {
        "id": "d113b0ae.ce8e2",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "CONTINUE COMMAND OUT",
        "links": [
            "f7e92348.be03"
        ],
        "x": 1115,
        "y": 840,
        "wires": []
    },
    {
        "id": "527c6575.c348bc",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1295,
        "y": 890,
        "wires": [
            [
                "5e73eadc.eb4274"
            ]
        ],
        "l": false
    },
    {
        "id": "d5e299ef.d66b6",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Prepare request",
        "func": "function precisionRound(number, precision) {\n   var factor = Math.pow(10, precision);\n   return Math.round(number * factor) / factor;\n}\ndelete msg.type;\ndelete msg.headers;\ndelete msg.certificate;\nmsg.device = [];\nmsg.current = msg.payload;\nmsg.newVal = [];\nif (msg.cmd.type === \"lights\" && msg.cmd.cmd === \"increase\") {\n   cptok = 0;\n   for (var i = 0; i < msg.items.length; i++) {\n      if (msg.items[i].type === \"dimmers\") {\n         if (msg.cmd.value !== undefined) {\n            var val = msg.cmd.value / 100 * msg.items[i].setBrightness.valueMax;\n            val = precisionRound(val, 0);\n            var newVal = parseInt(msg.current[i].Data[0].Value) + val;\n            if (newVal > msg.items[i].setBrightness.valueMax) {\n               newVal = msg.items[i].setBrightness.valueMax;\n            }\n            newVal = precisionRound(newVal, 0);\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].body.bri = newVal;\n            // msg.device[cptok].value = newVal;\n            cptok++;\n         } else {\n            var newVal = parseInt(msg.current[i].Data[0].Value) + (0.2 * msg.items[i].setBrightness.valueMax);\n            if (newVal > msg.items[i].setBrightness.valueMax) {\n               newVal = msg.items[i].setBrightness.valueMax;\n            }\n            newVal = precisionRound(newVal, 0);\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].body.bri = newVal;\n            // msg.device[cptok].value = newVal;\n            cptok++;\n         }\n      }\n   }\n} else if (msg.cmd.type === \"lights\" && msg.cmd.cmd === \"decrease\") {\n   cptok = 0;\n   for (var i = 0; i < msg.items.length; i++) {\n      if (msg.items[i].type === \"dimmers\") {\n         if (msg.cmd.value !== undefined) {\n            var val = msg.cmd.value / 100 * msg.items[i].setBrightness.valueMax;\n            val = precisionRound(val, 0);\n            var newVal = parseInt(msg.current[i].Data[0].Value) - val;\n            if (newVal < msg.items[i].setBrightness.valueMin) {\n               newVal = msg.items[i].setBrightness.valueMin;\n            }\n            newVal = precisionRound(newVal, 0);\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].body.bri = newVal;\n            // msg.device[cptok].value = newVal;\n            cptok++;\n         } else {\n            var newVal = parseInt(msg.current[i].Data[0].Value) - (0.2 * msg.items[i].setBrightness.valueMax);\n            if (newVal < msg.items[i].setBrightness.valueMin) {\n               newVal = msg.items[i].setBrightness.valueMin;\n            }\n            newVal = precisionRound(newVal, 0);\n            msg.device[cptok] = msg.items[i].setBrightness;\n            msg.device[cptok].body.bri = newVal;\n            // msg.device[cptok].value = newVal;\n            cptok++;\n         }\n      }\n   }\n}\n\nmsg.payload = msg.device;\ndelete msg.url;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1135,
        "y": 1120,
        "wires": [
            [
                "c69aaa5b.15f8d"
            ]
        ],
        "l": false
    },
    {
        "id": "f7e92348.be03",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "CONTINUE COMMAND IN",
        "links": [
            "d113b0ae.ce8e2"
        ],
        "x": 1085,
        "y": 1120,
        "wires": [
            [
                "d5e299ef.d66b6"
            ]
        ]
    },
    {
        "id": "97d173e4.5285f",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "CONTINUE QUERY OUT",
        "links": [
            "8708158.c0ca3e8"
        ],
        "x": 1185,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8708158.c0ca3e8",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "CONTINUE QUERY IN",
        "links": [
            "97d173e4.5285f"
        ],
        "x": 855,
        "y": 880,
        "wires": [
            [
                "d62bb2bc.099e48"
            ]
        ]
    },
    {
        "id": "850cae64.8a0408",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Readme Parser!",
        "info": "The parser for each device is defined in the device definition (see below).\nWhen you add a device from a different vendor, you must also modify the parser code below to handle the response.\n\n\"currentState\": {\n    \"name\": \"CurrentBrightness\",\n    \"url\": \"http://192.168.1.200/status\",\n    **\"parser\": \"shelly\",**\n    \"valueMin\": 0,\n    \"valueMax\": 100\n}",
        "x": 940,
        "y": 799,
        "wires": []
    },
    {
        "id": "cf312ef5.2f4df",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "INFO / README",
        "info": "- This group, CUSTOM DEVICES, enables voice control of custom devices, i.e. apart from the devices of the main Gateway you can add-on here.\n- \n- Any device that can be controlled via HTTP can be  integrataded here.\n- \n- This sample demonstrates how to declare (publish) your custom devices, in this case Philips lamp.",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "7a55485f.dcc59",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Specific body request?",
        "property": "payload.body",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1246,
        "y": 1100,
        "wires": [
            [
                "4430e5.d0cb7f1c"
            ],
            [
                "5833a09d.97daf"
            ]
        ],
        "l": false
    },
    {
        "id": "43fda4f8.d02b3c",
        "type": "http request",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "http [PUT]",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1388,
        "y": 1115,
        "wires": [
            [
                "1f1b1f9a.05a43"
            ]
        ]
    },
    {
        "id": "1f1b1f9a.05a43",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1495,
        "y": 1120,
        "wires": [],
        "l": false
    },
    {
        "id": "5833a09d.97daf",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Add specific body to http request",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload.url",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.body",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 1115,
        "wires": [
            [
                "43fda4f8.d02b3c"
            ]
        ],
        "l": false
    },
    {
        "id": "c8ce08c.e9e2d78",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Automatic CustomDeviceList for Philips Hue",
        "func": "// Get devices that are defined in Philips Hue bridge\n// And set them into the right format\nlet devices = [];\n\n// Bridge Ip address\nconst ipAddress = flow.get(\"bridgeIpAddress\");\n// node.error(\"IP address: \" + ipAddress);\n\n// Username\nlet username = flow.get(\"bridgeApiKey\");\n\n// Groups (zone)\nlet groups = msg.payload.groups;\n// node.warn(groups);\n\n//-------------------- Lights --------------------//\nlet lights = msg.payload.lights;\n\nif(lights !== undefined){\n    for(const obj in lights){\n        \n        // Template for lights\n        let light = \n            {\n                \"custom\": true,\n                \"name\": \"\",\n                \"zone\": \"\",\n                \"object\": \"\",\n                \"type\": \"dimmers\",\n                \"setOn\": {\n                    \"name\": \"On\",\n                    \"url\": \"\",\n                    \"body\": {\n                        \"on\": true\n                    }\n                },\n                \"setOff\": {\n                    \"name\": \"Off\",\n                    \"url\": \"\",\n                    \"body\": {\n                        \"on\": false\n                    }\n                },\n                \"setBrightness\": {\n                  \"name\": \"Brightness\",\n                  \"url\" : \"\",\n                  \"valueMin\":1,\n                  \"valueMax\":254,\n                  \"body\": {\n                      \"on\": true,\n                      \"bri\": 127\n                  }\n                },\n                \"currentState\": {\n                    \"name\": \"CurrentBrightness\",\n                    \"url\": \"\",\n                    \"parser\": \"philips\",\n                    \"id\": 0,\n                    \"bri\": 0,\n                    \"valueMin\": 1,\n                    \"valueMax\": 254\n                }\n            }\n        \n        // Light id for url\n        let lightID = obj;\n        \n        // Zone\n        for(const grp in groups){\n            if(groups[grp].lights.length !== 0){\n                // At least one light is part of the group\n                for(let i=0; i < groups[grp].lights.length; ++i){\n                    if(groups[grp].lights[i] === lightID){\n                        // Get zone\n                        light.zone = groups[grp].name;\n                    }\n                }\n            }\n            else{\n                // No light is part of the group\n                light.zone = \"Default\";\n            }\n        }\n        // Object (light name)\n        light.object = lights[obj].name;\n    \n        // Name\n        light.name = light.zone+\" \"+light.object;\n        \n        //***** Change functionType if it is a smart plug ****//\n        if(lights[obj].name === \"plug\"){\n            light.type = \"lights\";\n            light.currentState.name = \"CurrentState\";\n        }\n        \n        // On\n        light.setOn.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID+\"/state\";\n        // Off\n        light.setOff.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID+\"/state\";\n        // Brightness\n        light.setBrightness.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID+\"/state\";\n        // State\n        light.currentState.url= \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+lightID;\n        light.currentState.id= parseInt(lightID, 10);\n        if(lights[obj].state.bri !== undefined){\n            // Current brightness\n            light.currentState.bri= lights[obj].state.bri;\n        }\n        \n        // Add light to msgDeviceList\n        devices.push(light);\n        \n        \n        // node.warn(light);\n        // node.warn(devices);\n    }\n}\n\n//-------------------- Sensors --------------------//\nlet sensors = msg.payload.sensors;\n\nif(sensors !== undefined){\n    for(const obj in sensors){\n        \n        // Template for sensors\n        let sensor = \n            {\n                \"custom\": true,\n                \"name\": \"\",\n                \"type\": \"sensor\",\n                \"zone\": \"\",\n                \"object\": \"\",\n                \"currentState\": [\n                    {\n                        \"name\": \"CurrentValue\",\n                        \"url\": \"\",\n                        \"parser\": \"philips\",\n                        \"id\": 0\n                    }\n                ]\n            }\n        \n        // sensor id for url\n        let sensorID = obj;\n        \n        // Zone\n        for(const grp in groups){\n            if(groups[grp].sensors.length !== 0){\n                // At least one sensor is part of the group\n                for(let i=0; i < groups[grp].sensors.length; ++i){\n                    if(groups[grp].sensors[i] === sensorID){\n                        // Get zone\n                        sensor.zone = groups[grp].name;\n                    }\n                }\n            }\n            else{\n                // No sensor is part of the group\n                sensor.zone = \"Default\";\n            }\n        }\n        // Sensor name\n        sensor.name = sensors[obj].name;\n        \n        // State\n        sensor.currentState.url= \"http://\"+ipAddress+\"/api/\"+username+\"/sensors/\"+sensorID;\n        sensor.currentState.id= parseInt(sensorID,10);\n        \n        // Add sensor to msgDeviceList\n        devices.push(sensor);\n        \n        // node.warn(sensor);\n        // node.warn(devices);\n    }\n}\n\n//-------------------- Scenes --------------------//\nlet scenes = msg.payload.scenes;\n\nif(scenes !== undefined){\n    for(const obj in scenes){\n        \n        // Template for scene\n        let scene = \n            {\n                \"custom\": true,\n                \"name\": \"\",\n                \"type\": \"scenes\",\n                \"zone\": \"\",\n                \"object\": \"\",\n                \"group\": \"\",\n                \"setOn\":\n                    {\n                        \"name\": \"On\",\n                        \"url\": \"\",\n                        \"body\": {\n                            \"scene\": \"\"\n                        }\n                    }\n            }\n        \n        // scene id for url\n        let sceneID = obj;\n        \n        // Group & zone\n        if(scenes[obj].hasOwnProperty(\"group\") && scenes[obj].group !== \"\" && scenes[obj].group !== undefined){\n            scene.group = scenes[obj].group;\n            scene.zone = groups[parseInt(scene.group, 10)].name;\n        }\n        else{\n            // No scene is part of the group: default group & serverSiteId as zone\n            scene.group = \"0\";\n            let serverSiteId = global.get(\"msgServerSiteId\");\n            serverSiteId = serverSiteId.replace('_', ' ');\n            serverSiteId = serverSiteId.charAt(0).toUpperCase() + serverSiteId.slice(1);\n            \n            scene.zone = serverSiteId;\n        }\n        \n        // Object \n        scene.object = scenes[obj].name;\n        // Name\n        scene.name = scene.zone+\" \"+scene.object;\n        \n        // State\n        scene.setOn.url= \"http://\"+ipAddress+\"/api/\"+username+\"/groups/\"+scene.group+\"/action/\";\n        scene.setOn.body.scene = sceneID;\n        \n        // Add scene to msgDeviceList\n        devices.push(scene);\n        \n        // node.warn(scene);\n        // node.warn(devices);\n    }\n}\n\nmsg.payload = devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1255,
        "y": 680,
        "wires": [
            [
                "3c32f142.95428e",
                "cb6ad983.5d0d2",
                "ccf65620.e26fb8"
            ]
        ],
        "l": false
    },
    {
        "id": "85e806dc.9236a8",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Automatic customDeviceList (debug)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1000,
        "y": 680,
        "wires": [
            [
                "ff17d3c2.1fa47"
            ]
        ]
    },
    {
        "id": "3c32f142.95428e",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1355,
        "y": 680,
        "wires": [],
        "l": false
    },
    {
        "id": "4316f2cd.86c3cc",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "↓ Custom devices - automatically define your Philips devices ↓",
        "info": "",
        "x": 1060,
        "y": 640,
        "wires": []
    },
    {
        "id": "672dcd9b.b46b9c",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "AUTO DEVICE LIST IN",
        "links": [
            "9bcfbaae.298fc8",
            "ae5e431a.80fa48"
        ],
        "x": 1115,
        "y": 720,
        "wires": [
            [
                "ff17d3c2.1fa47"
            ]
        ]
    },
    {
        "id": "ff17d3c2.1fa47",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1195,
        "y": 680,
        "wires": [
            [
                "c8ce08c.e9e2d78"
            ]
        ],
        "l": false
    },
    {
        "id": "ccf65620.e26fb8",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "UI UPDATE DEVICE LIST OUT",
        "links": [
            "6014d20e.8b417c"
        ],
        "x": 1355,
        "y": 720,
        "wires": []
    },
    {
        "id": "6c965645.ca7318",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 235,
        "y": 1460,
        "wires": [],
        "l": false
    },
    {
        "id": "b0dde4e7.08e92",
        "type": "http request",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Create new user (once only)",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 335,
        "y": 660,
        "wires": [
            [
                "3d376ff1.e0f108"
            ]
        ],
        "l": false
    },
    {
        "id": "60dbc035.28ec4",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "d": true,
        "g": "2addc59d.da626a",
        "name": "Create new user (debug)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "{\"devicetype\":\"my_hue_app#phone default_user\"}",
        "payloadType": "json",
        "x": 95,
        "y": 680,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "3a6babce.4633bc",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 455,
        "y": 640,
        "wires": [
            [
                "180d275.6673dd9"
            ]
        ],
        "l": false
    },
    {
        "id": "c59bea3a.183cc",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "http://{{bridgeIpAddress}}/api",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 215,
        "y": 660,
        "wires": [
            [
                "1183db3d.b5b3c5"
            ]
        ],
        "l": false
    },
    {
        "id": "1183db3d.b5b3c5",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "{{bridgeIpAddress}}",
                "fromt": "str",
                "to": "bridgeIpAddress",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 275,
        "y": 660,
        "wires": [
            [
                "b0dde4e7.08e92"
            ]
        ],
        "l": false
    },
    {
        "id": "65fc0b4c.6d5c6c",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Create authorized user for Philips Hue Bridge",
        "info": "Authorized user are allowed to control all devices that have been defined in Philips Hue Android App.",
        "x": 210,
        "y": 560,
        "wires": []
    },
    {
        "id": "b5b06634.d6a27",
        "type": "ui_button",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "New connection",
        "group": "5e9a38be.a92b4",
        "order": 3,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "New connection",
        "tooltip": "Please press Philips Hue link button before pressing the \"New connection\" button.",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"devicetype\":\"my_hue_app#phone default_user\"}",
        "payloadType": "json",
        "topic": "topic",
        "x": 95,
        "y": 640,
        "wires": [
            [
                "c2b5c34c.101d78"
            ]
        ],
        "l": false
    },
    {
        "id": "9c663cfc.cc0e7",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 635,
        "y": 600,
        "wires": [],
        "l": false
    },
    {
        "id": "180d275.6673dd9",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Username already created?",
        "property": "bridgeApiKey",
        "propertyType": "flow",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 515,
        "y": 620,
        "wires": [
            [
                "699b738.a8d7d8c",
                "7664029e.5b629c"
            ],
            [
                "94f3dffa.02c6a8",
                "e505b5d7.556a8"
            ]
        ],
        "l": false
    },
    {
        "id": "e25c9e2c.53bb8",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 695,
        "y": 660,
        "wires": [],
        "l": false
    },
    {
        "id": "1d516a3a.716b56",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "bridgeDevices",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 135,
        "y": 1420,
        "wires": [
            [
                "6c965645.ca7318",
                "530f0f84.a282c",
                "313dd1e7.6586de"
            ]
        ],
        "l": false
    },
    {
        "id": "64df1bec.7e813c",
        "type": "ui_text",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "group": "5e9a38be.a92b4",
        "order": 7,
        "width": 14,
        "height": 1,
        "name": "Info",
        "label": "Information:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 550,
        "y": 840,
        "wires": []
    },
    {
        "id": "6379e7c0.8ce3b",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "To be able to command your Philips devices, please connect your bridge.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 375,
        "y": 820,
        "wires": [
            [
                "64df1bec.7e813c"
            ]
        ],
        "l": false
    },
    {
        "id": "86293f1.2b085c",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Your Philips Hue bridge is connected and ready for use.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 395,
        "y": 860,
        "wires": [
            [
                "64df1bec.7e813c"
            ]
        ],
        "l": false
    },
    {
        "id": "c81af2ef.2ffe8",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 840,
        "wires": [
            [
                "e2fca6d9.ce46"
            ]
        ]
    },
    {
        "id": "b9399fe9.3d727",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "UI Dashboard",
        "info": "This user interface helps is used to set up the first connection between Philips Hue bridge and ARAGON.",
        "x": 110,
        "y": 520,
        "wires": []
    },
    {
        "id": "699e8797.5daf48",
        "type": "ui_template",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "group": "5e9a38be.a92b4",
        "name": "Header",
        "order": 1,
        "width": 14,
        "height": 7,
        "format": "<div ng-bind-html=\"msg.payload\" \n    style= \"width: 100%;  \n        padding-top:10px; \n        padding-bottom:10px;\n        font-family: 'Trebuchet MS', Arial, Times, serif;\n    \">\n    \n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 280,
        "y": 1060,
        "wires": [
            [
                "d2790902.f1e5a8"
            ]
        ]
    },
    {
        "id": "a9fe7943.5c4ec",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Paragraph",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "<h1>Philips Hue</h1>   <p>          This tab is used to set up the connection between your Philips Hue Bridge and your ARAGON.<br>          Please follow the next steps whether it is the first connection:<br>        <ol>         <li>Press the link button on the Philips Hue Bridge</li>         <li>Click on \"NEW CONNECTION\" button</li>         <li>Make sure the connection is established, see \"Information\".</li>     </ol>                <br>Once your Philips Hue bridge is connected, you may be able to command your Philips Devices by using your voice. A list of the available devices is displayed on the side.     <br><br><u>Notes:</u>      <ol>         <li>If the IP address of your Philips Hue bridge cannot be found, please enter it manually.</li>         <li>Click on \"SEARCH FOR PHILIPS HUE DEVICES & SCENES\" if no device or scene appears.</li>     </ol> </p>",
        "payloadType": "str",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "699e8797.5daf48"
            ]
        ]
    },
    {
        "id": "d2790902.f1e5a8",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 395,
        "y": 1060,
        "wires": [],
        "l": false
    },
    {
        "id": "ca1dcace.6400a",
        "type": "ui_button",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Devices",
        "group": "28dad04f.67e66",
        "order": 1,
        "width": 7,
        "height": 1,
        "passthru": false,
        "label": "Search for Philips Hue devices & scenes",
        "tooltip": "Searchs for available devices and displays them in the list below",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "http://{{bridgeIpAddress}}/api/{{bridgeApiKey}}/lights",
        "payloadType": "str",
        "topic": "topic",
        "x": 115,
        "y": 1200,
        "wires": [
            [
                "62c5ccf1.8925c4"
            ]
        ],
        "l": false
    },
    {
        "id": "77a4d85e.bdba5",
        "type": "ui_text",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "group": "5e9a38be.a92b4",
        "order": 2,
        "width": "5",
        "height": 1,
        "name": "Spacer",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 55,
        "y": 640,
        "wires": [],
        "l": false
    },
    {
        "id": "1387df5d.be85f1",
        "type": "ui_dropdown",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Lights_list",
        "label": "Lights",
        "tooltip": "",
        "place": "Show list",
        "group": "28dad04f.67e66",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "8abdf964.f6f59"
            ]
        ]
    },
    {
        "id": "8abdf964.f6f59",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 705,
        "y": 1420,
        "wires": [],
        "l": false
    },
    {
        "id": "e2ba9bf2.90454",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Your bridge is already connected!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 635,
        "y": 660,
        "wires": [
            [
                "e25c9e2c.53bb8"
            ]
        ],
        "l": false
    },
    {
        "id": "699b738.a8d7d8c",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please press the link button then click again on \"NEW CONNECTION\".",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 575,
        "y": 600,
        "wires": [
            [
                "9c663cfc.cc0e7"
            ]
        ],
        "l": false
    },
    {
        "id": "1aaec6ab.6cf279",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.lights",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 355,
        "y": 1460,
        "wires": [],
        "l": false
    },
    {
        "id": "b0aca39f.3bd26",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 335,
        "y": 860,
        "wires": [
            [
                "86293f1.2b085c"
            ]
        ],
        "l": false
    },
    {
        "id": "e2fca6d9.ce46",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 255,
        "y": 840,
        "wires": [
            [
                "6379e7c0.8ce3b"
            ],
            [
                "6379e7c0.8ce3b"
            ],
            [
                "b0aca39f.3bd26"
            ]
        ],
        "l": false
    },
    {
        "id": "e799d037.2a7e6",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Failed login",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please connect your bridge first.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 295,
        "y": 1180,
        "wires": [
            [
                "cdd495d8.15cae8"
            ]
        ],
        "l": false
    },
    {
        "id": "530f0f84.a282c",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Update device list",
        "func": "let devices= flow.get(\"bridgeDevices\");\n\nvar lights_name= [];\nvar sensors_name= [];\nvar scenes_name= [];\nmsg.payload= {};\n\nfor(let id in devices){\n\n    switch(devices[id].type){\n        \n        //Get lights + room\n        case \"dimmers\":\n        case \"lights\":\n            lights_name.push(devices[id].object + \" - Room: \" + devices[id].zone);\n            break;\n        \n        //Get sensors + room\n        case \"sensor\":\n            sensors_name.push(devices[id].name + \" - Room: \" + devices[id].zone);\n            break;\n        \n        //Get scenes + room\n        case \"scenes\":\n            scenes_name.push(devices[id].object + \" - Room: \" + devices[id].zone);\n            break;\n            \n        default:\n            node.warn(\"Device not found!\");\n    }\n    \n}\n\nmsg.payload.lights = lights_name;\nmsg.payload.sensors = sensors_name;\nmsg.payload.scenes = scenes_name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 355,
        "y": 1420,
        "wires": [
            [
                "1aaec6ab.6cf279",
                "1487738c.ca7cfc",
                "45557099.59e7f8",
                "765590ed.61608"
            ]
        ],
        "l": false
    },
    {
        "id": "90880671.1f9c8",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Intructions for user",
        "info": "",
        "x": 130,
        "y": 1020,
        "wires": []
    },
    {
        "id": "7f5e8353.b50664",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Connection status",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "b8b8f4de.ca0cb8",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "SUCESSFUL LOG IN (STATUS)",
        "links": [
            "94f3dffa.02c6a8",
            "cb10032d.16796"
        ],
        "x": 255,
        "y": 880,
        "wires": [
            [
                "b0aca39f.3bd26"
            ]
        ]
    },
    {
        "id": "c74db45.17968c8",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "GET IP OUT",
        "links": [
            "41080d37.accf7c",
            "67df965c.8ddf88"
        ],
        "x": 215,
        "y": 600,
        "wires": []
    },
    {
        "id": "c2b5c34c.101d78",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "bridge IP?",
        "property": "bridgeIpAddress",
        "propertyType": "flow",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            },
            {
                "t": "istype",
                "v": "string",
                "vt": "string"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 155,
        "y": 640,
        "wires": [
            [
                "c74db45.17968c8"
            ],
            [
                "c59bea3a.183cc"
            ]
        ],
        "l": false
    },
    {
        "id": "94f3dffa.02c6a8",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "SUCCESSFUL NEW CONNECTION",
        "links": [
            "b8b8f4de.ca0cb8"
        ],
        "x": 575,
        "y": 680,
        "wires": []
    },
    {
        "id": "fc42d0bf.d007a8",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Logged in",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Search in progress, please wait.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 295,
        "y": 1220,
        "wires": [
            [
                "6a6cba77.197d44"
            ]
        ],
        "l": false
    },
    {
        "id": "6a6cba77.197d44",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "position": "top right",
        "displayTime": "4",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 355,
        "y": 1220,
        "wires": [],
        "l": false
    },
    {
        "id": "c898c6a.9a48738",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Devices found!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 355,
        "y": 1340,
        "wires": [
            [
                "5af2a5ae.04d0b4"
            ]
        ],
        "l": false
    },
    {
        "id": "5af2a5ae.04d0b4",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 415,
        "y": 1340,
        "wires": [],
        "l": false
    },
    {
        "id": "62c5ccf1.8925c4",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 215,
        "y": 1200,
        "wires": [
            [
                "e799d037.2a7e6"
            ],
            [
                "fc42d0bf.d007a8",
                "b54ff977.3d4958"
            ]
        ],
        "l": false
    },
    {
        "id": "bb756f68.5f42c8",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "UI DEVICES OUT",
        "links": [
            "b71af0ab.534aa8"
        ],
        "x": 355,
        "y": 1260,
        "wires": []
    },
    {
        "id": "cdd495d8.15cae8",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 355,
        "y": 1180,
        "wires": [],
        "l": false
    },
    {
        "id": "6014d20e.8b417c",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "UI UPDATE DEVICES LIST IN",
        "links": [
            "ccf65620.e26fb8"
        ],
        "x": 55,
        "y": 1420,
        "wires": [
            [
                "1d516a3a.716b56"
            ]
        ]
    },
    {
        "id": "64bbcbc2.b3356c",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "***********************Get Devices & Scenes (manually)***********************",
        "info": "",
        "x": 300,
        "y": 1140,
        "wires": []
    },
    {
        "id": "fa4418af.714f08",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Update UI",
        "info": "",
        "x": 100,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b54ff977.3d4958",
        "type": "delay",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 295,
        "y": 1260,
        "wires": [
            [
                "bb756f68.5f42c8"
            ]
        ],
        "l": false
    },
    {
        "id": "d01ae85e.72d318",
        "type": "ui_dropdown",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Sensors_list",
        "label": "Sensors",
        "tooltip": "",
        "place": "Show list",
        "group": "28dad04f.67e66",
        "order": 4,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "x": 610,
        "y": 1480,
        "wires": [
            [
                "574b3102.553c6"
            ]
        ]
    },
    {
        "id": "574b3102.553c6",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 715,
        "y": 1480,
        "wires": [],
        "l": false
    },
    {
        "id": "1487738c.ca7cfc",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload.sensors",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 1480,
        "wires": [
            [
                "d01ae85e.72d318"
            ]
        ],
        "l": false
    },
    {
        "id": "313dd1e7.6586de",
        "type": "delay",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 235,
        "y": 1360,
        "wires": [
            [
                "3f1400bb.9c51e"
            ]
        ],
        "l": false
    },
    {
        "id": "d5a4589b.b210d8",
        "type": "file",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "filename": "usernamePhilipsHue.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 635,
        "y": 560,
        "wires": [
            [
                "52e583c8.4fae2c",
                "acf5fed5.d85b7"
            ]
        ],
        "l": false
    },
    {
        "id": "7664029e.5b629c",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Save username (file & flow variable)",
        "func": "if(msg.payload[0].success.username !== undefined){\n    \n    let usernamePhilips = msg.payload[0].success.username;\n    \n    // flow variable\n    flow.set(\"bridgeApiKey\", usernamePhilips);\n    \n    // file\n    msg.payload = {\"username\": usernamePhilips};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 575,
        "y": 560,
        "wires": [
            [
                "d5a4589b.b210d8"
            ]
        ],
        "l": false
    },
    {
        "id": "52e583c8.4fae2c",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 695,
        "y": 520,
        "wires": [],
        "l": false
    },
    {
        "id": "acf5fed5.d85b7",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "BRIDGE CONNECTION OUT",
        "links": [
            "62759ad1.5ac124"
        ],
        "x": 695,
        "y": 560,
        "wires": []
    },
    {
        "id": "3d376ff1.e0f108",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "status",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 395,
        "y": 660,
        "wires": [
            [
                "3a6babce.4633bc"
            ],
            [
                "b69e033b.70df8",
                "38fa18d5.ab71e8"
            ]
        ],
        "l": false
    },
    {
        "id": "fcd5defb.fd20a8",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 575,
        "y": 760,
        "wires": [],
        "l": false
    },
    {
        "id": "b69e033b.70df8",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Error & delete IP",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "The IP address seems to be wrong, please try again.",
                "tot": "str"
            },
            {
                "t": "delete",
                "p": "bridgeIpAddress",
                "pt": "flow"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 515,
        "y": 760,
        "wires": [
            [
                "fcd5defb.fd20a8"
            ]
        ],
        "l": false
    },
    {
        "id": "3f1400bb.9c51e",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Device found?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 295,
        "y": 1360,
        "wires": [
            [
                "c898c6a.9a48738"
            ],
            [
                "ec2c1055.2bbcf"
            ]
        ],
        "l": false
    },
    {
        "id": "ec2c1055.2bbcf",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No device has been found!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 355,
        "y": 1380,
        "wires": [
            [
                "4669897d.3be5d"
            ]
        ],
        "l": false
    },
    {
        "id": "4669897d.3be5d",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 415,
        "y": 1380,
        "wires": [],
        "l": false
    },
    {
        "id": "3550eee.fb8c192",
        "type": "http request",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "get Bridge IP",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/hue/bridges/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "35735c1.7978ea4",
                "8b095d36.774c88"
            ]
        ]
    },
    {
        "id": "77d13800.12f378",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 515,
        "y": 200,
        "wires": [
            [
                "a0b37854.67b8a"
            ]
        ],
        "l": false
    },
    {
        "id": "ec810ff1.dcd948",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Get Bridge IP address via Huemagic Node",
        "info": "Huemagic node has to be installed via \"Manage palette\" menu.",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "759ecff0.9431d8",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "empty?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 435,
        "y": 140,
        "wires": [
            [
                "7024b55f.c79df4"
            ],
            [
                "77d13800.12f378"
            ]
        ],
        "l": false
    },
    {
        "id": "7024b55f.c79df4",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "error",
        "func": "msg.cmd={};\nmsg.cmd.lang = global.get(\"msgLang\");\n    if (msg.cmd.lang === \"de\") {\n        text = \"Bitte geben Sie die IP-Adresse der PHILIPS HUE Bridge auf der Benutzeroberfläche ein\";\n        msg.error = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"de-DE\",\n            forceText: true\n        };\n    } else if (msg.cmd.lang === \"fr\") {\n        text = \"Veuillez indiquer l'adresse IP du pont PHILIPS HUE sur l'interface utilisateur\";\n        msg.error = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"fr-FR\",\n            forceText: true\n        };\n    } else {\n        text = \"Please indicate the IP address of PHILIPS HUE bridge in the user interface\";\n        msg.error = {\n            text: text,\n            siteId: msg.cmd.siteId,\n            lang: \"en-EN\",\n            forceText: true\n        };\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 120,
        "wires": [
            [
                "e314a576.72637"
            ]
        ]
    },
    {
        "id": "e314a576.72637",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 635,
        "y": 120,
        "wires": []
    },
    {
        "id": "23670bde.89242c",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 755,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "7bdce417.edae3c",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Authorized user?",
        "info": "",
        "x": 920,
        "y": 60,
        "wires": []
    },
    {
        "id": "696003a4.f9ea14",
        "type": "http request",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1235,
        "y": 120,
        "wires": [
            [
                "6fe489a3.632278",
                "fdc350b4.a52bc"
            ]
        ],
        "l": false
    },
    {
        "id": "107b52b9.2e3ea5",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1395,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "b5a2cf95.37b08",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1375,
        "y": 140,
        "wires": [
            [
                "377b469e.7cac52",
                "107b52b9.2e3ea5"
            ]
        ],
        "l": false
    },
    {
        "id": "cb10032d.16796",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "SUCCESSFUL LOG IN OUT",
        "links": [
            "6acb7db6.2431c4",
            "b71af0ab.534aa8",
            "b8b8f4de.ca0cb8"
        ],
        "x": 1515,
        "y": 200,
        "wires": []
    },
    {
        "id": "62759ad1.5ac124",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "BRIDGE CONNECTION IN",
        "links": [
            "acf5fed5.d85b7",
            "f5b98d9c.21304"
        ],
        "x": 855,
        "y": 160,
        "wires": [
            [
                "6246b834.cf9178"
            ]
        ]
    },
    {
        "id": "fdc350b4.a52bc",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "status",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1295,
        "y": 120,
        "wires": [
            [
                "851dec95.3f8418"
            ],
            [
                "b5a2cf95.37b08"
            ]
        ],
        "l": false
    },
    {
        "id": "33dc59af.80968e",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1435,
        "y": 100,
        "wires": [],
        "l": false
    },
    {
        "id": "6fe489a3.632278",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "statusCode",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1295,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "851dec95.3f8418",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Sorry an error has occured, please try again.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1375,
        "y": 100,
        "wires": [
            [
                "33dc59af.80968e"
            ]
        ],
        "l": false
    },
    {
        "id": "377b469e.7cac52",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Authorized user?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "istype",
                "v": "array",
                "vt": "array"
            },
            {
                "t": "istype",
                "v": "object",
                "vt": "object"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1435,
        "y": 140,
        "wires": [
            [
                "e7ca5bff.147c1"
            ],
            [
                "cb10032d.16796",
                "980e4d7f.d30598"
            ]
        ],
        "l": false
    },
    {
        "id": "e7ca5bff.147c1",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Please connect your bridge with \"NEW CONNECTION\"..",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1515,
        "y": 100,
        "wires": [
            [
                "80e1114c.7bd108"
            ]
        ],
        "l": false
    },
    {
        "id": "80e1114c.7bd108",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "position": "top right",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Failed login",
        "x": 1575,
        "y": 100,
        "wires": [],
        "l": false
    },
    {
        "id": "980e4d7f.d30598",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Successful connection!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1515,
        "y": 160,
        "wires": [
            [
                "44e00380.81abfc"
            ]
        ],
        "l": false
    },
    {
        "id": "44e00380.81abfc",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Successful login",
        "x": 1575,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "67df965c.8ddf88",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "GET IP IN",
        "links": [
            "c74db45.17968c8",
            "8c683cb3.2f7af",
            "7ef3cb53.e9e574"
        ],
        "x": 115,
        "y": 220,
        "wires": [
            [
                "3550eee.fb8c192",
                "d92c28c8.c9f3c8"
            ]
        ]
    },
    {
        "id": "6246b834.cf9178",
        "type": "file in",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "filename": "usernamePhilipsHue.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 935,
        "y": 140,
        "wires": [
            [
                "6424de4b.816198"
            ]
        ],
        "l": false
    },
    {
        "id": "aa9e5d03.ca803",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Get username & IP address from file",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 855,
        "y": 120,
        "wires": [
            [
                "6246b834.cf9178",
                "20f7ed46.03e2aa"
            ]
        ],
        "l": false
    },
    {
        "id": "6424de4b.816198",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 995,
        "y": 140,
        "wires": [
            [
                "d762ae7e.2dded8"
            ]
        ],
        "l": false
    },
    {
        "id": "dad095bf.c61918",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Set IpAddress",
        "rules": [
            {
                "t": "set",
                "p": "bridgeIpAddress",
                "pt": "flow",
                "to": "payload.bridgeIpAddress",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1055,
        "y": 100,
        "wires": [
            [
                "4fb7da56.f3993c"
            ]
        ],
        "l": false
    },
    {
        "id": "492786b2.6d4618",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "error msg",
        "func": "msg.cmd={};\nmsg.cmd.lang = global.get(\"msgLang\");\nvar ourIP = global.get(\"msgServerIP\");\nvar text = \"\";\nvar text2 = \"\";\n\n// No unsolicited spoken error messages 22-07\nvar d = new Date();\nvar hour = d.getHours();\nif (hour >= 22 || hour < 7 ) {\n    node.warn(\"Skipping spoken error messages during the night: \"+hour);\n    return;\n}\n\nif (msg.cmd.lang === \"de\") {\n    text = \"...\";\n    if(ourIP.length>0){\n        text2 = \" Die adresse ist \" + ourIP;\n    }\n    msg.error = {\n        text: text,\n        siteId: msg.cmd.siteId,\n        lang: \"de-DE\",\n        forceRestart: true\n    };\n} else if (msg.cmd.lang === \"fr\") {\n    text = \"Dans votre navigateur, allez sur l'interface utilisateur, section PHILIPS Gateway et suivez les instructions données.\";\n    if(ourIP.length>0){\n        text = \"Dans votre navigateur, allez sur: \"+ ourIP + \" deux points 1880 slash ui. Suivez les instructions données dans la section PHILIPS Gateway.\";\n        text2 = \" L'adresse est \" + ourIP;\n    }\n    msg.error = {\n        text: text,\n        siteId: msg.cmd.siteId,\n        lang: \"fr-FR\",\n        forceRestart: true\n    };\n} else {\n    text = \"In your browser, navigate to the user interface and follow the given instructions in the PHILIPS Gateway tab\";\n    if(ourIP.length>0){\n        text = \"In your browser, navigate to: \"+ ourIP + \" colon 1880 slash ui. Follow the given instructions in the PHILIPS Gateway tab\";\n        text2 = \" The address is \" + ourIP;\n    }\n    msg.error = {\n        text: text,\n        siteId: msg.cmd.siteId,\n        lang: \"en-EN\",\n        forceRestart: true\n    };\n}\nvar msg2;\nif(text2.length>0){\n    msg2 = JSON.parse(JSON.stringify(msg))\n    msg2.error.text = text2;\n    msg2.error.forceRestart= true;\n}\nreturn [msg,msg2];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1580,
        "y": 300,
        "wires": [
            [
                "90a0d5d.3f50928"
            ]
        ]
    },
    {
        "id": "90a0d5d.3f50928",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "links": [
            "521b53e0.33f214"
        ],
        "x": 1675,
        "y": 300,
        "wires": []
    },
    {
        "id": "87d6cbae.e00dd",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "status?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "EHOSTUNREACH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ECONNREFUSED",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1300,
        "y": 340,
        "wires": [
            [
                "492786b2.6d4618"
            ],
            [
                "492786b2.6d4618"
            ],
            [
                "492786b2.6d4618"
            ],
            [
                "3c39b2e0.6dad0e"
            ]
        ]
    },
    {
        "id": "ee518937.bf5918",
        "type": "catch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "scope": [
            "87d6cbae.e00dd"
        ],
        "uncaught": false,
        "x": 1435,
        "y": 280,
        "wires": [
            [
                "492786b2.6d4618"
            ]
        ],
        "l": false
    },
    {
        "id": "3c39b2e0.6dad0e",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "empty",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 360,
        "wires": [
            [
                "492786b2.6d4618"
            ],
            [
                "eae08d34.2d70b"
            ]
        ]
    },
    {
        "id": "2af73916.8b1e26",
        "type": "http request",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Philips Hue devices",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1110,
        "y": 340,
        "wires": [
            [
                "87d6cbae.e00dd"
            ]
        ]
    },
    {
        "id": "a0b2b2e2.824a4",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "IP & Username",
        "rules": [
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "{{bridgeIpAddress}}",
                "fromt": "str",
                "to": "bridgeIpAddress",
                "tot": "flow"
            },
            {
                "t": "change",
                "p": "url",
                "pt": "msg",
                "from": "{{username}}",
                "fromt": "str",
                "to": "bridgeApiKey",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 975,
        "y": 340,
        "wires": [
            [
                "2af73916.8b1e26"
            ]
        ],
        "l": false
    },
    {
        "id": "eae08d34.2d70b",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Philips Hue JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1510,
        "y": 420,
        "wires": [
            [
                "ae5e431a.80fa48",
                "5040563b.e4e4"
            ]
        ]
    },
    {
        "id": "c646d486.fff028",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "url",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "http://{{bridgeIpAddress}}/api/{{username}}/",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 915,
        "y": 340,
        "wires": [
            [
                "a0b2b2e2.824a4"
            ]
        ],
        "l": false
    },
    {
        "id": "b71af0ab.534aa8",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "GET DEVICES IN",
        "links": [
            "9bf5bad8.eb0008",
            "58cad645.1441d8",
            "bb756f68.5f42c8",
            "cb10032d.16796"
        ],
        "x": 855,
        "y": 340,
        "wires": [
            [
                "c646d486.fff028"
            ]
        ]
    },
    {
        "id": "3e17c612.61572a",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Get Philips Hue device list",
        "info": "",
        "x": 950,
        "y": 300,
        "wires": []
    },
    {
        "id": "ae5e431a.80fa48",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "AUTO DEVICE LIST OUT",
        "links": [
            "672dcd9b.b46b9c"
        ],
        "x": 1675,
        "y": 420,
        "wires": []
    },
    {
        "id": "64510ac9.1a9484",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "IP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 75,
        "y": 160,
        "wires": [
            [
                "c72f0a62.f3eb08"
            ]
        ],
        "l": false
    },
    {
        "id": "45557099.59e7f8",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload.lights",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 1420,
        "wires": [
            [
                "1387df5d.be85f1"
            ]
        ],
        "l": false
    },
    {
        "id": "35735c1.7978ea4",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "statusCode",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 375,
        "y": 120,
        "wires": [],
        "l": false
    },
    {
        "id": "8b095d36.774c88",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Not found?",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 375,
        "y": 160,
        "wires": [
            [
                "759ecff0.9431d8"
            ],
            [
                "8cfe403.61bcd4"
            ]
        ],
        "l": false
    },
    {
        "id": "a98977c7.ef93b8",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Search for IP address",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "IP address not found!",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 295,
        "y": 340,
        "wires": [
            [
                "c0859a6e.cc8b"
            ]
        ],
        "l": false
    },
    {
        "id": "35f6b3c5.c51bec",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "position": "prompt",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Submit",
        "cancel": "New research",
        "raw": true,
        "topic": "",
        "name": "",
        "x": 415,
        "y": 340,
        "wires": [
            [
                "5d66352a.0b904c"
            ]
        ],
        "l": false
    },
    {
        "id": "c1be106f.0537e8",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Debug IP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "192.168.1.173",
        "payloadType": "str",
        "x": 615,
        "y": 340,
        "wires": [
            [
                "a0b37854.67b8a"
            ]
        ],
        "l": false
    },
    {
        "id": "a7afeb6c.927cc",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Ip address?",
        "property": "bridgeIpAddress",
        "propertyType": "flow",
        "rules": [
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 115,
        "y": 340,
        "wires": [
            [
                "b476f12a.d70458"
            ]
        ],
        "l": false
    },
    {
        "id": "9ff63c97.019008",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "New research",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "New research",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 535,
        "y": 340,
        "wires": [
            [
                "82c79764.355558"
            ],
            [
                "7ef3cb53.e9e574"
            ]
        ],
        "l": false
    },
    {
        "id": "41080d37.accf7c",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "GET IP UI IN",
        "links": [
            "c74db45.17968c8"
        ],
        "x": 55,
        "y": 400,
        "wires": [
            [
                "d347de67.782df"
            ]
        ]
    },
    {
        "id": "d347de67.782df",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "login==false?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 115,
        "y": 400,
        "wires": [
            [
                "2ff79ae2.ee1eb6"
            ]
        ],
        "l": false
    },
    {
        "id": "2ff79ae2.ee1eb6",
        "type": "delay",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "pauseType": "delay",
        "timeout": "12",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 175,
        "y": 400,
        "wires": [
            [
                "b476f12a.d70458"
            ]
        ],
        "l": false
    },
    {
        "id": "a694c23e.7e6ed",
        "type": "delay",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 235,
        "y": 340,
        "wires": [
            [
                "a98977c7.ef93b8"
            ]
        ],
        "l": false
    },
    {
        "id": "c72f0a62.f3eb08",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Login initially false",
        "rules": [
            {
                "t": "set",
                "p": "login",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 135,
        "y": 160,
        "wires": [
            [
                "3550eee.fb8c192",
                "d92c28c8.c9f3c8"
            ]
        ],
        "l": false
    },
    {
        "id": "7ef3cb53.e9e574",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "GET IP OUT",
        "links": [
            "67df965c.8ddf88"
        ],
        "x": 595,
        "y": 380,
        "wires": []
    },
    {
        "id": "82c79764.355558",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "login==false?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 595,
        "y": 300,
        "wires": [
            [
                "a0b37854.67b8a"
            ]
        ],
        "l": false
    },
    {
        "id": "5040563b.e4e4",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1675,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "765590ed.61608",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "options",
                "pt": "msg",
                "to": "payload.scenes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 495,
        "y": 1540,
        "wires": [
            [
                "728ecc2.5114834"
            ]
        ],
        "l": false
    },
    {
        "id": "728ecc2.5114834",
        "type": "ui_dropdown",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Scenes_list",
        "label": "Scenes",
        "tooltip": "",
        "place": "Show list",
        "group": "28dad04f.67e66",
        "order": 3,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "x": 610,
        "y": 1540,
        "wires": [
            [
                "977cab2.605c8d8"
            ]
        ]
    },
    {
        "id": "977cab2.605c8d8",
        "type": "debug",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 715,
        "y": 1540,
        "wires": [],
        "l": false
    },
    {
        "id": "a0b37854.67b8a",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Save ip address (file & flow variable)",
        "func": "// Ip address found by Huemagic node\nif(msg.payload[0].ip !== undefined){\n    \n    let bridgeIpAddress = msg.payload[0].ip;\n    \n    // flow variable\n    flow.set(\"bridgeIpAddress\", bridgeIpAddress);\n    \n    // file\n    msg.payload = {\"bridgeIpAddress\": bridgeIpAddress};\n}\n// Ip address not found by Huemagic node\nelse{\n    let bridgeIpAddress = msg.payload;\n    \n    // flow variable\n    flow.set(\"bridgeIpAddress\", bridgeIpAddress);\n    \n    // file\n    msg.payload = {\"bridgeIpAddress\": bridgeIpAddress};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 635,
        "y": 200,
        "wires": [
            [
                "fe9a5bd6.933b58"
            ]
        ],
        "l": false
    },
    {
        "id": "fe9a5bd6.933b58",
        "type": "file",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "filename": "bridgeIpAddressPH.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 695,
        "y": 200,
        "wires": [
            [
                "23670bde.89242c",
                "e1d31b8.dd81de8"
            ]
        ],
        "l": false
    },
    {
        "id": "328854ee.8db714",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Ask for Bridge IP address (UI)",
        "info": "",
        "x": 340,
        "y": 300,
        "wires": []
    },
    {
        "id": "20f7ed46.03e2aa",
        "type": "file in",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "filename": "bridgeIpAddressPH.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 935,
        "y": 100,
        "wires": [
            [
                "7702bd78.2116a4"
            ]
        ],
        "l": false
    },
    {
        "id": "7702bd78.2116a4",
        "type": "json",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 995,
        "y": 100,
        "wires": [
            [
                "dad095bf.c61918"
            ]
        ],
        "l": false
    },
    {
        "id": "baa48c70.37b5f8",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Set url",
        "func": "// Bridge info\nlet username = flow.get(\"bridgeApiKey\");\nlet bridgeIpAddress = flow.get(\"bridgeIpAddress\");\n\nif(bridgeIpAddress !== undefined && username !== undefined){\n    msg.url = \"http://\"+bridgeIpAddress+\"/api/\"+username;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1175,
        "y": 120,
        "wires": [
            [
                "696003a4.f9ea14"
            ]
        ],
        "l": false
    },
    {
        "id": "f84db62e.21f9b8",
        "type": "inject",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Login?",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 940,
        "wires": [
            [
                "f5b98d9c.21304"
            ]
        ]
    },
    {
        "id": "f5b98d9c.21304",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "BRIDGE CONNECTION OUT",
        "links": [
            "62759ad1.5ac124"
        ],
        "x": 255,
        "y": 940,
        "wires": []
    },
    {
        "id": "d762ae7e.2dded8",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Set username",
        "rules": [
            {
                "t": "set",
                "p": "bridgeApiKey",
                "pt": "flow",
                "to": "payload.username",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1055,
        "y": 140,
        "wires": [
            [
                "4fb7da56.f3993c"
            ]
        ],
        "l": false
    },
    {
        "id": "4fb7da56.f3993c",
        "type": "delay",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "x": 1115,
        "y": 120,
        "wires": [
            [
                "baa48c70.37b5f8"
            ]
        ],
        "l": false
    },
    {
        "id": "b476f12a.d70458",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "istype",
                "v": "undefined",
                "vt": "undefined"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 175,
        "y": 340,
        "wires": [
            [
                "a694c23e.7e6ed"
            ],
            [
                "a694c23e.7e6ed"
            ]
        ],
        "l": false
    },
    {
        "id": "8cfe403.61bcd4",
        "type": "trigger",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "pay",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 55,
        "y": 340,
        "wires": [
            [
                "a7afeb6c.927cc"
            ]
        ],
        "l": false
    },
    {
        "id": "e505b5d7.556a8",
        "type": "switch",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "login?",
        "property": "login",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 575,
        "y": 640,
        "wires": [
            [
                "acf5fed5.d85b7"
            ],
            [
                "e2ba9bf2.90454"
            ]
        ],
        "l": false
    },
    {
        "id": "d92c28c8.c9f3c8",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Searching for your Philips Hue bridge IP address, please wait.",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 195,
        "y": 200,
        "wires": [
            [
                "fe5b0311.9c8418"
            ]
        ],
        "l": false
    },
    {
        "id": "fe5b0311.9c8418",
        "type": "ui_toast",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 255,
        "y": 200,
        "wires": [],
        "l": false
    },
    {
        "id": "c0859a6e.cc8b",
        "type": "template",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<div ng-bind-html=\"msg.payload\" \n    style=\"font-family: 'Trebuchet MS', Arial, Times, serif;\"\n    >\n   <p>Cannot find the IP address of your Philips bridge, please enter the IP address manually then submit it. <br>You can click on \"NEW RESEARCH\" to try finding the IP address automatically.<p> \n</div>",
        "output": "str",
        "x": 355,
        "y": 340,
        "wires": [
            [
                "35f6b3c5.c51bec"
            ]
        ],
        "l": false
    },
    {
        "id": "38fa18d5.ab71e8",
        "type": "file",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "Delete IP address file",
        "filename": "bridgeIpAddressPH.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 515,
        "y": 720,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "d038e1be.fe8b5",
        "type": "link in",
        "z": "7d53bde.1a645c4",
        "g": "2addc59d.da626a",
        "name": "CREATE NEW USER IN",
        "links": [
            "e1d31b8.dd81de8"
        ],
        "x": 195,
        "y": 720,
        "wires": [
            [
                "c59bea3a.183cc"
            ]
        ]
    },
    {
        "id": "e1d31b8.dd81de8",
        "type": "link out",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "CREATE NEW USER OUT",
        "links": [
            "d038e1be.fe8b5"
        ],
        "x": 755,
        "y": 240,
        "wires": []
    },
    {
        "id": "5d66352a.0b904c",
        "type": "change",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Reset notification title",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 475,
        "y": 340,
        "wires": [
            [
                "9ff63c97.019008"
            ]
        ],
        "l": false
    },
    {
        "id": "8a9685d8.e367f8",
        "type": "function",
        "z": "7d53bde.1a645c4",
        "g": "25715a84.05775e",
        "name": "Set URL",
        "func": "// Bridge Ip address\nconst ipAddress = flow.get(\"bridgeIpAddress\");\n// Username\nlet username = flow.get(\"bridgeApiKey\");\n// Device ID\nlet deviceID = msg.payload.id;\n\nmsg.payload.url = \"http://\"+ipAddress+\"/api/\"+username+\"/lights/\"+deviceID;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 995,
        "y": 900,
        "wires": [
            [
                "5cdfb22d.a1ebfc"
            ]
        ],
        "l": false
    },
    {
        "id": "e6316ee2.08de",
        "type": "catch",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "",
        "scope": [
            "6246b834.cf9178",
            "20f7ed46.03e2aa"
        ],
        "uncaught": false,
        "x": 935,
        "y": 180,
        "wires": [
            [
                "4fb7da56.f3993c"
            ]
        ],
        "l": false
    },
    {
        "id": "d5c74c02.c4ab7",
        "type": "comment",
        "z": "7d53bde.1a645c4",
        "g": "489facd2.bdc3dc",
        "name": "Version 10-05-2021",
        "info": "*Version 10-05-2021: \n    - Query for lights and dimmers\n\n*Version 08-19-2021 (first version):\n    - Command for lights and scenes\n    - UI Dashboard\n    - Query not implemented yet",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "f96ab142.d8bab8",
        "type": "mqtt-broker",
        "z": "6c5ba148.be5d3",
        "name": "-",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "info": "-"
    },
    {
        "id": "5e9a38be.a92b4",
        "type": "ui_group",
        "name": "Main",
        "tab": "26d5fa47.2db246",
        "order": 1,
        "disp": false,
        "width": 14,
        "collapse": false
    },
    {
        "id": "28dad04f.67e66",
        "type": "ui_group",
        "name": "Hue_devices",
        "tab": "26d5fa47.2db246",
        "order": 5,
        "disp": false,
        "width": 7,
        "collapse": false
    },
    {
        "id": "26d5fa47.2db246",
        "type": "ui_tab",
        "name": "PHILIPS HUE",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
